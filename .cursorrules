// Awesome CursorRules
// A curated list of awesome .cursorrules files for enhancing Cursor AI experience
// https://github.com/PatrickJS/awesome-cursorrules/tree/main/rules

General guidelines
- Always use Markdown for documentation and README files
- Maintain the existing structure of the README.md file
- Follow consistent formatting for list items
- Use descriptive names for .cursorrules files and their folders

// README.md structure
// The README.md file should maintain the following structure:
// 1. Title and Awesome badge
// 2. Logo
// 3. Short description
// 4. "Why .cursorrules?" section
// 5. Table of Contents
// 6. Rules section (organized by categories)
// 7. How to Use section
// 8. Contributing section
// 9. License section

Organization of rules
Rules are organized into the following main categories:
- Frontend Frameworks and Libraries
- Backend and Full-Stack
- Mobile Development
- CSS and Styling
- State Management
- Database and API
- Testing
- Build Tools and Development
- Language-Specific
- Other

File structure for .cursorrules files
Each .cursorrules file should follow this structure:
1. Title and brief description
2. Project structure information
3. General guidelines
4. Implementation details
5. Example content
6. How to use instructions
7. Benefits of using the rules
8. Additional resources

// Repository structure
// - README.md: Main documentation file
// - rules/: Directory containing all .cursorrules files
//   - README.md: Documentation for the rules directory
//   - [technology]-cursorrules.md: Individual rule files
// - .cursorrules: This file, providing guidance for the repository itself

Best practices for .cursorrules files
- Focus on providing repo-level context and guidelines
- Include information about project structure and architectural decisions
- Document commonly used libraries or methods
- Include rules for handling specific file types or coding patterns
- Cover both code generation and code understanding aspects
- Keep rules concise and focused on practical use cases
- Use comments to explain complex rules or provide context

Contributing guidelines
When contributing new .cursorrules files:
1. Follow the naming conventions
2. Place the file in the appropriate category
3. Include all the required sections
4. Provide clear and concise guidance
5. Focus on project-specific instructions and best practices
6. Update the main README.md to include your new file
7. Ensure your file follows the established structure and formatting

Additional insights
.cursorrules files are repo-specific "Rules for AI"
.cursorrules files should be placed in the root of the repository
The content of .cursorrules files will be appended to the global "Rules for AI" settings in Cursor
Focus on providing repo-level context and guidelines, not just general coding practices
.cursorrules can include information about project structure, architectural decisions, and commonly used libraries or methods
Consider including rules for handling specific file types or coding patterns unique to your project
Rules can cover both code generation and code understanding aspects for Cursor AI

Build tools used
1. Bazel for building, testing and packaging docker images
2. Skaffold for development mode and deployments as a replacement for docker-compose
3. Always use best practice and latest versions for these tools