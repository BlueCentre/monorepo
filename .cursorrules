// Awesome CursorRules
// A curated list of awesome .cursorrules files for enhancing Cursor AI experience

// General guidelines
Always use Markdown for documentation and README files
Maintain the existing structure of the README.md file

// README.md structure
Maintain the following structure in the README.md file:
  1. Title and Awesome badge
  2. Logo
  3. Short description
  4. "Why .cursorrules?" section
  5. Table of Contents
  6. Rules section
     - Frontend Frameworks and Libraries
     - Backend and Full-Stack
     - Mobile Development
     - CSS and Styling
     - State Management
     - Database and API
     - Testing
     - Build Tools and Development
     - Language-Specific
     - Other
  7. How to Use section
  8. Contributing section
  9. License section

// Organization of rules
Organize .cursorrules files into the following main categories within the 'rules' directory:
  - Frontend Frameworks and Libraries
  - Backend and Full-Stack
  - Mobile Development
  - CSS and Styling
  - State Management
  - Database and API
  - Testing
  - Build Tools and Development
  - Language-Specific
  - Other
Place each .cursorrules file directly in the 'rules' folder
The folder name for each .cursorrules file should describe the category and content of the file
Refer to the README in each folder for guidance on naming conventions and descriptions

// Naming and formatting
Use descriptive names for .cursorrules files and their folders, following the pattern: 'technology-focus-cursorrules-prompt-file'
Maintain alphabetical order within each category in the README.md file
Use consistent formatting for list items in the README.md file

// Content guidelines
When creating or editing .cursorrules files, focus on project-specific instructions and best practices
Include comments in .cursorrules files to explain complex rules or provide context
Use clear and concise language in all documentation and .cursorrules files
Provide context on what you're building, style guidelines, or info on commonly-used methods

// Optional README for credit and description
Each .cursorrules file may have an accompanying README.md file in its folder
Use this README to provide credit to the original author and a brief description of the .cursorrules file's purpose

// Maintenance and updates
Update the README.md file when adding new .cursorrules files, placing them in the correct category
Ensure all links in the README.md file are relative and correct
When updating the README.md, ensure the table of contents remains accurate
When adding new categories, update both the 'Contents' and 'Rules' sections of the README.md
Regularly review and update categorization as the repository grows

// Best practices
Maintain consistency in capitalization and punctuation throughout the repository
When referencing Cursor AI, always use the correct capitalization and spacing
When adding examples or explanations, focus on practical use cases for Cursor AI users
If a .cursorrules file fits multiple categories, place it in the most relevant one and cross-reference in others if necessary
Keep the 'Other' category for .cursorrules files that don't fit neatly into the main categories

// Additional insights
.cursorrules files are repo-specific "Rules for AI"
.cursorrules files should be placed in the root of the repository
The content of .cursorrules files will be appended to the global "Rules for AI" settings in Cursor
Focus on providing repo-level context and guidelines, not just general coding practices
.cursorrules can include information about project structure, architectural decisions, and commonly used libraries or methods
Consider including rules for handling specific file types or coding patterns unique to your project
Rules can cover both code generation and code understanding aspects for Cursor AI

// Python Echo App - Rules for AI
// This file provides guidance for working with the Python Echo App project

// Project Structure
// - projects/py/echo_fastapi_app/app/web_app.py: Contains the mock FastAPI implementation
// - projects/py/echo_fastapi_app/bin/run_bin.py: Simple HTTP server implementation
// - projects/py/echo_fastapi_app/tests/test.py: Test file for the application

// General Guidelines
// 1. This project intentionally avoids external dependencies like FastAPI and uvicorn
// 2. Use only Python standard library modules for all functionality
// 3. Maintain backward compatibility with the existing API endpoints
// 4. Keep the code simple and well-documented

// Implementation Details
// - The application implements a simple HTTP server using Python's built-in http.server module
// - It provides two endpoints: "/" and "/status"
// - The MockFastAPI class in web_app.py simulates FastAPI functionality without the dependency
// - All responses should be JSON-formatted

// Testing
// - Tests should not rely on external testing libraries when possible
// - Use Python's built-in unittest module for testing
// - Ensure tests can run in the Bazel build environment

// Build System
// - The project uses Bazel for building and testing
// - All Python dependencies are commented out in BUILD.bazel files
// - Use py_library, py_binary, and py_test rules for defining targets
// - The application should be runnable with: bazel run //projects/py/echo_fastapi_app:run_bin

// Code Style
// - Follow PEP 8 guidelines for Python code
// - Use docstrings for all functions and classes
// - Prefer explicit imports over wildcard imports
// - Keep functions small and focused on a single responsibility

// Error Handling
// - Use appropriate HTTP status codes for error responses
// - Log errors and important events using the logging module
// - Handle exceptions gracefully to prevent server crashes

// Performance Considerations
// - The server should handle multiple concurrent requests
// - Keep response times minimal
// - Avoid unnecessary computation in request handlers