---
description: 
globs: 
alwaysApply: false
---
# Managing Local Database Credentials for IaC-Managed Databases

## Overview

This rule outlines the recommended pattern for applications running in a local development Kubernetes cluster (like Colima/Docker Desktop) to securely access credentials for databases provisioned via Infrastructure as Code tools (Terraform/Pulumi), specifically using CloudNativePG (CNPG) as an example.

## Problem Context

When a database like CNPG is deployed via Terraform/Pulumi, it often auto-generates initial credentials and stores them in a Kubernetes secret within its own namespace (e.g., `cnpg-system`). Applications running in different namespaces (e.g., `template-fastapi-app`) need access to these credentials.

While `ExternalSecrets` with a `kubernetes` provider `ClusterSecretStore` can theoretically sync secrets across namespaces, configuring this reliably in local development environments can be complex due to issues with service account permissions, API server authentication (CA certificates), and controller readiness (as encountered previously). Relying on auto-generated passwords also requires careful synchronization.

## Recommended Solution: Predefined Password + Fake Store

For local development, a more robust and straightforward approach uses a predefined password managed by Terraform/Pulumi and a `fake` ExternalSecrets provider.

**Steps:**

1.  **Define Static Credentials in IaC:**
    *   Add variables for the desired database username and password in your IaC configuration (`variables.tf` or `Pulumi.dev.yaml`). Use a known, simple password for local dev only. Mark the password variable as sensitive.
    *   *Example (`variables.tf`):*
        ```terraform
        variable "cnpg_app_db_user" {
          description = "Username for the application database user."
          type        = string
          default     = "app_user"
        }

        variable "cnpg_app_db_password" {
          description = "Password for the application database user."
          type        = string
          default     = "REPLACE_WITH_CNPG_APP_DB_PASSWORD" # Default insecure password for local dev
          sensitive   = true
        }
        ```

2.  **Create Initial K8s Secret via IaC:**
    *   Use your IaC tool to create a standard Kubernetes secret (e.g., `type: kubernetes.io/basic-auth`) in the database's namespace *before* creating the database cluster resource. This secret contains the static username and password from the variables.
    *   *Example (`helm_cnpg.tf`):*
        ```terraform
        resource "kubernetes_secret" "cnpg_app_credentials" {
          count = var.cnpg_enabled ? 1 : 0
          metadata {
            name      = "cnpg-initial-app-credentials" # Name to be referenced by CNPG
            namespace = var.cnpg_cluster_namespace     # e.g., cnpg-system
          }
          data = {
            username = var.cnpg_app_db_user
            password = var.cnpg_app_db_password
          }
          type = "kubernetes.io/basic-auth"
          depends_on = [helm_release.cloudnative_pg] # Ensure namespace exists
        }
        ```

3.  **Configure Database Bootstrap:**
    *   Modify the database cluster resource definition (e.g., CNPG `Cluster`) to use the secret created above for its initial user setup, instead of auto-generating credentials.
    *   *Example (CNPG `Cluster` in `helm_cnpg.tf`):*
        ```terraform
        resource "kubernetes_manifest" "cnpg_cluster" {
          # ... other config ...
          spec       = {
            instances  = 1
            bootstrap  = {
              initdb = {
                database = var.cnpg_app_db_name
                # owner = var.cnpg_app_db_user # Owner comes from the secret now
                secret = {
                  name = kubernetes_secret.cnpg_app_credentials[0].metadata[0].name
                }
              }
            }
            # ... other spec ...
          }
          depends_on = [time_sleep.wait_for_cnpg_webhook, kubernetes_secret.cnpg_app_credentials[0]]
        }
        ```

4.  **Create Fake `ClusterSecretStore` via IaC:**
    *   Use your IaC tool to create a `ClusterSecretStore` resource using the `fake` provider. This store directly exposes the static username and password as key/value pairs with a specific version (e.g., `v1`). Give it a descriptive name (e.g., `fake-cnpg-secrets-store`).
    *   *Example (`helm_external_secrets.tf`):*
        ```terraform
        resource "kubectl_manifest" "fake_cnpg_secrets_store" {
          count      = var.external_secrets_enabled && var.cnpg_enabled ? 1 : 0
          yaml_body  = <<EOF
        apiVersion: external-secrets.io/v1beta1
        kind: ClusterSecretStore
        metadata:
          name: fake-cnpg-secrets-store
          namespace: external-secrets # ESO controller namespace
        spec:
          provider:
            fake:
              data:
              - key: "username" # Key name application will request
                value: "${var.cnpg_app_db_user}"
                version: "v1"
              - key: "password" # Key name application will request
                value: "${var.cnpg_app_db_password}"
                version: "v1"
        EOF
          depends_on = [helm_release.external_secrets]
        }
        ```

5.  **Create Application `ExternalSecret`:**
    *   In the application's Kubernetes manifests (managed by Skaffold, Helm, etc.), create an `ExternalSecret` resource in the application's namespace.
    *   Configure it to use the `fake` `ClusterSecretStore` created in step 4.
    *   Use `spec.data` to specify the keys (`username`, `password`) to retrieve from the fake store, referencing the correct `key` and `version` (`v1`).
    *   Specify the `target.name` for the local secret to be created in the application's namespace.
    *   *Example (`external-secret-db.yaml`):*
        ```yaml
        apiVersion: external-secrets.io/v1beta1
        kind: ExternalSecret
        metadata:
          name: template-fastapi-app-db-credentials # Target local secret name
          namespace: template-fastapi-app # App namespace
        spec:
          refreshInterval: "1h"
          secretStoreRef:
            name: fake-cnpg-secrets-store # Reference the fake store
            kind: ClusterSecretStore
          target:
            name: template-fastapi-app-db-credentials # Target local secret name
            creationPolicy: Owner
          data:
          - secretKey: username # Key in the target secret
            remoteRef:
              key: username     # Key in the fake store
              version: "v1"     # Version in the fake store
          - secretKey: password # Key in the target secret
            remoteRef:
              key: password     # Key in the fake store
              version: "v1"     # Version in the fake store
        ```

6.  **Configure Application Pods:**
    *   Update the application's `Deployment`, `Job`, etc., to mount environment variables (e.g., `POSTGRES_USER`, `POSTGRES_PASSWORD`) from the *local secret* created by the `ExternalSecret` (e.g., `template-fastapi-app-db-credentials`).
    *   *Example (`deployment.yaml`):*
        ```yaml
        # ...
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: template-fastapi-app-db-credentials # Reference local secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: template-fastapi-app-db-credentials # Reference local secret
              key: password
        # ...
        ```

## Benefits

*   **Reliability:** Avoids potential issues with cross-namespace secret access permissions and `kubernetes` provider configuration in local clusters.
*   **Simplicity:** The `fake` provider is straightforward to configure.
*   **Consistency:** Ensures the database is initialized with the same password the application expects.
*   **Debugging:** Easier to troubleshoot credential issues as the source value is static in the IaC variables.

## Important Note

This pattern uses a static, potentially insecure password defined in IaC variables (`default` value). **This is suitable ONLY for local development.** For staging/production environments, you should use a proper secrets management solution (like GCP Secret Manager, HashiCorp Vault, etc.) integrated with ExternalSecrets using their respective providers, and remove or override the default password variable.