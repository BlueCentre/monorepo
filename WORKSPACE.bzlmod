# See:
# - https://docs.bazel.build/versions/main/build-ref.html#workspace
# - https://www.youtube.com/watch?v=2Nn71RV_yhI
# - https://bazel.build/external/overview#blzmod
# - https://docs.aspect.build/rules/aspect_bazel_lib/
# - https://github.com/aspect-build/bazel-examples/blob/main/oci_python_image/MODULE.bazel

# NOTE: 
# - This overrides WORKSPACE.bazel.
# - This needs to be symlinked to WORKSPACE for Skaffold.

# Declares that this directory is the root of a Bazel workspace.
workspace(
    # How this workspace would be referenced with absolute labels from another workspace
    name = "monorepo",
)

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")



#
# BuildBuddy
#

# See: 
# - https://www.buildbuddy.io/docs/rbe-setup#configuring-your-workspace
# - https://github.com/buildbuddy-io/buildbuddy-toolchain
# - https://github.com/buildbuddy-io/buildbuddy-toolchain#ubuntu-2004-image-experimental

http_archive(
    name = "io_buildbuddy_buildbuddy_toolchain",
    sha256 = "e899f235b36cb901b678bd6f55c1229df23fcbc7921ac7a3585d29bff2bf9cfd",
    strip_prefix = "buildbuddy-toolchain-fd351ca8f152d66fc97f9d98009e0ae000854e8f",
    urls = ["https://github.com/buildbuddy-io/buildbuddy-toolchain/archive/fd351ca8f152d66fc97f9d98009e0ae000854e8f.tar.gz"],
)

load("@io_buildbuddy_buildbuddy_toolchain//:deps.bzl", "buildbuddy_deps")

buildbuddy_deps()

load("@io_buildbuddy_buildbuddy_toolchain//:rules.bzl", "buildbuddy", "UBUNTU20_04_IMAGE")

buildbuddy(name = "buildbuddy_toolchain", container_image = UBUNTU20_04_IMAGE)



#
# Salesforce rules_spring
#

# See:
# - https://github.com/salesforce/rules_spring/issues/153

http_archive(
    name = "rules_spring",
    sha256 = "01426d0a67c32ba0de0b0f3baa2b0810087789c6260c0c06741c1733956158a3",
    urls = ["https://github.com/salesforce/rules_spring/releases/download/2.2.4/rules-spring-2.2.4.zip"],
)


#
# Deprecate everything below!
#

#
# Local python approach with workaround support for multi-version
#

### Python Setup (https://github.com/bazelbuild/rules_python/blob/main/examples/pip_install/WORKSPACE)
### Goal: Hermeticity (https://bazel.build/basics/hermeticity)
# load("@rules_python//python:repositories.bzl", "py_repositories")
load("@rules_python//python:repositories.bzl", "py_repositories", "python_register_multi_toolchains")

py_repositories()

load("@rules_python//python/pip_install:repositories.bzl", "pip_install_dependencies")

pip_install_dependencies()

# TODO: Currently needs to match with python version in MODULE.bazel
default_python_version = "3.11"

python_register_multi_toolchains(
    name = "python",
    default_version = default_python_version,
    python_versions = [
        "3.11",
        "3.10",
        "3.9",
        "3.8",
    ],
    register_coverage_tool = True,
)

load("@python//:pip.bzl", "multi_pip_parse")
load("@python//3.11:defs.bzl", interpreter_3_11 = "interpreter")
load("@python//3.10:defs.bzl", interpreter_3_10 = "interpreter")
load("@python//3.9:defs.bzl", interpreter_3_9 = "interpreter")
load("@python//3.8:defs.bzl", interpreter_3_8 = "interpreter")

multi_pip_parse(
    name = "pip_deps",
    default_version = default_python_version,
    python_interpreter_target = {
        "3.11": interpreter_3_11,
        "3.10": interpreter_3_10,
        "3.9": interpreter_3_9,
        "3.8": interpreter_3_8,
    },
    requirements_lock = {
        "3.11": "//third_party/python:requirements_lock_3_11.txt",
        "3.10": "//third_party/python:requirements_lock_3_10.txt",
        "3.9": "//third_party/python:requirements_lock_3_9.txt",
        "3.8": "//third_party/python:requirements_lock_3_8.txt",
    },
    # extra_pip_args = [
    #     "--extra-index-url", "https://pip.corp.flyrlabs.com/repo"
    # ],
    #download_only = True,
)

load("@pip_deps//:requirements.bzl", "install_deps")

install_deps()



#
# rules_java
#

# load("@rules_java//java:repositories.bzl", "rules_java_dependencies", "rules_java_toolchains")
# rules_java_dependencies()
# rules_java_toolchains()

#
# rules_docker
#

# http_archive(
#     name = "io_bazel_rules_docker",
#     sha256 = "b1e80761a8a8243d03ebca8845e9cc1ba6c82ce7c5179ce2b295cd36f7e394bf",
#     urls = ["https://github.com/bazelbuild/rules_docker/releases/download/v0.25.0/rules_docker-v0.25.0.tar.gz"],
# )

#
# Golang (rules_docker - go_image)
#

# load("@rules_go//go:deps.bzl", "go_register_toolchains", "go_rules_dependencies")

# go_rules_dependencies()

# go_register_toolchains(
#     go_version = "1.20.2",
# )

# load(
#     "@io_bazel_rules_docker//repositories:repositories.bzl",
#     container_repositories = "repositories",
# )

# container_repositories()

# load(
#     "@io_bazel_rules_docker//repositories:deps.bzl",
#     container_deps = "deps",
# )

# container_deps()

# load(
#     "@io_bazel_rules_docker//go:image.bzl",
#     _go_image_repos = "repositories",
# )

# _go_image_repos()



#
# rules_oci (newer than rules_docker; but without using gazelle)
#

#
# Golang (rules_oci - oci_go_image)
#

# load("@rules_oci//oci:pull.bzl", "oci_pull")

# oci_pull(
#     name = "go_base",
#     image = "index.docker.io/library/golang",
#     digest = "sha256:690e4135bf2a4571a572bfd5ddfa806b1cb9c3dea0446ebadaf32bc2ea09d4f9",
#     platforms = [
#         "linux/amd64",
#     ],
# )
