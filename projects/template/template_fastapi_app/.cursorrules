# Template FastAPI Application
# Rules for AI assistance in Cursor

## Project Structure
This is a modern FastAPI application template with PostgreSQL, Google Cloud Pub/Sub, and more.

The project follows a modular structure:
- `app/`: Main application package
  - `api/`: API endpoints
  - `core/`: Core modules (config, security)
  - `crud/`: CRUD operations
  - `db/`: Database modules
  - `models/`: SQLAlchemy models
  - `pubsub/`: Pub/Sub modules
  - `schemas/`: Pydantic schemas
- `migrations/`: Alembic migrations
- `tests/`: Tests
- `kubernetes/`: Kubernetes deployment files

## General Guidelines
- Follow PEP 8 style guidelines
- Use type hints for all function parameters and return values
- Document all functions, classes, and modules with docstrings
- Use dependency injection for database sessions and authentication
- Implement proper error handling and validation
- Write unit tests for all functionality

## Implementation Details
- FastAPI is used for the API framework
- SQLAlchemy is used for ORM
- Alembic is used for database migrations
- Pydantic is used for data validation
- JWT is used for authentication
- Google Cloud Pub/Sub is used for asynchronous messaging
- OpenTelemetry is used for observability
- Docker is used for containerization
- Kubernetes is used for deployment

## Code Generation Guidelines
- When generating API endpoints, follow the pattern in `app/api/v1/endpoints/`
- When generating models, follow the pattern in `app/models/`
- When generating schemas, follow the pattern in `app/schemas/`
- When generating CRUD operations, follow the pattern in `app/crud/`
- When generating tests, follow the pattern in `tests/`

## OpenTelemetry Guidelines
- The application is instrumented with OpenTelemetry for tracing, metrics, and logging
- All FastAPI requests, SQLAlchemy operations, and logging are automatically instrumented
- Traces are exported to Jaeger, which is included in the docker-compose.yml and Kubernetes configuration
- Custom spans can be added using the OpenTelemetry API
- Configuration settings for OpenTelemetry are in the `.env` file
- The `app/core/telemetry.py` module handles the setup of OpenTelemetry
- Environment variables for OpenTelemetry:
  - `ENABLE_TELEMETRY`: Enable/disable OpenTelemetry (default: true)
  - `OTLP_EXPORTER_ENDPOINT`: Endpoint for the OTLP exporter (default: http://jaeger:4317)
  - `OTLP_SERVICE_NAME`: Name of the service for OpenTelemetry

## Best Practices
- Use async/await for I/O-bound operations
- Use dependency injection for database sessions and authentication
- Use Pydantic for request and response validation
- Use SQLAlchemy for database operations
- Use JWT for authentication
- Use Google Cloud Pub/Sub for asynchronous messaging
- Use OpenTelemetry for tracing and metrics
- Use Docker for containerization
- Use Kubernetes for deployment
