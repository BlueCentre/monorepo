# See https://bazel.build/concepts/build-files

# FastAPI app integrated with Bazel Bzlmod
# 
# NOTE: This app currently has partial integration with Bazel due to version mismatches
# between the app's requirements and what's available in the monorepo's pip dependencies.
# For a complete build, you should consider:
# 1. Updating the monorepo's requirements.in with all dependencies needed by this app
# 2. Regenerating the requirements_lock file with the correct versions
# 3. Or, adjusting the app code to be compatible with the versions available in the monorepo
#
# Current limitations:
# - Tests will fail due to import errors (pydantic version mismatch)
# - Some imports like opentelemetry, google-cloud-pubsub are not available

load("@rules_python//python:defs.bzl", "py_binary", "py_library", "py_test")
load("@pip//:requirements.bzl", "requirement")

package(default_visibility = ["//visibility:public"])

# Python library with all app code
py_library(
    name = "app_lib",
    srcs = glob(["app/**/*.py"]),
    imports = ["."],
    deps = [
        requirement("fastapi"),
        requirement("pydantic"),
        requirement("sqlalchemy"),
        requirement("asyncpg"),
        requirement("httpx"),
        # Note: Other dependencies like opentelemetry, google-cloud-pubsub, etc. 
        # are not available in the current pip configuration
    ],
)

# The main application binary
py_binary(
    name = "run_bin",
    srcs = glob(["bin/**/*.py"]),
    main = "bin/run_bin.py",
    imports = ["."],
    deps = [":app_lib"],
)

# Database migration script binary
py_binary(
    name = "run_migrations",
    srcs = glob(["migrations/**/*.py"]),
    main = "migrations/scripts/run_migrations.py",
    imports = ["."],
    deps = [":app_lib"],
)

# Test targets with proper dependencies
py_test(
    name = "test_main",
    srcs = ["tests/test_main.py", "tests/__init__.py"],
    main = "tests/test_main.py",
    imports = ["."],
    tags = ["manual"],
    deps = [
        ":app_lib",
        requirement("pytest"),
        requirement("httpx"),
    ],
)

py_test(
    name = "test_telemetry",
    srcs = ["tests/test_telemetry.py", "tests/__init__.py"],
    main = "tests/test_telemetry.py",
    imports = ["."],
    tags = ["manual"],
    deps = [
        ":app_lib",
        requirement("pytest"),
    ],
)

py_test(
    name = "web_app_test",
    srcs = ["tests/web_app_test.py", "tests/__init__.py"],
    main = "tests/web_app_test.py",
    imports = ["."],
    tags = ["manual"],
    deps = [
        ":app_lib",
        requirement("pytest"),
        requirement("httpx"),
    ],
)
