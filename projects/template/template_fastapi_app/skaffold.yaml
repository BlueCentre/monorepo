apiVersion: skaffold/v4beta6
kind: Config
metadata:
  name: template-fastapi-app
build:
  artifacts:
  - image: template-fastapi-app
    custom:
      buildCommand: |
        # Navigate to monorepo root first
        MONOREPO_ROOT=$(cd ../../.. && pwd)
        cd $MONOREPO_ROOT
        
        # Then build the tarball
        bazel build //projects/template/template_fastapi_app:image_tarball
        
        # Extract the tarball
        TEMP_DIR=$(mktemp -d)
        tar -xf bazel-bin/projects/template/template_fastapi_app/image_tarball.tar -C $TEMP_DIR
        
        # Verify contents were extracted correctly
        echo "Extracted files:"
        ls -la $TEMP_DIR
        
        # If Dockerfile doesn't exist, rename Dockerfile.bazel to Dockerfile
        if [ ! -f "$TEMP_DIR/Dockerfile" ] && [ -f "$TEMP_DIR/Dockerfile.bazel" ]; then
          echo "Renaming Dockerfile.bazel to Dockerfile"
          cp $TEMP_DIR/Dockerfile.bazel $TEMP_DIR/Dockerfile
        fi
        
        # Build the Docker image
        docker build -t $IMAGE $TEMP_DIR
        
        # Clean up
        rm -rf $TEMP_DIR
      dependencies:
        paths:
          - "**/*"
  local:
    push: false
    useBuildkit: false
manifests:
  rawYaml:
  - kubernetes/*.yaml
deploy:
  kubectl: {}
  # Add post-deployment verification for database initialization
  statusCheck: true

# Add verification to run the database initialization job after deployment
verify:
  - name: database-initialization
    container:
      name: kubectl
      image: bitnami/kubectl:latest
      command: ["/bin/bash", "-c"]
      args:
        - |
          echo "Waiting for all resources to be ready..."
          sleep 10 # Give time for resources to start
          
          echo "Running database initialization job..."
          # Delete any existing job first
          kubectl delete job db-init -n template-fastapi-app --ignore-not-found=true
          
          # Apply the database initialization job
          kubectl apply -f kubernetes/db-init-job.yaml
          
          # Wait for the job to complete
          echo "Waiting for database initialization job to complete..."
          kubectl wait --for=condition=complete job/db-init -n template-fastapi-app --timeout=60s
          
          if [ $? -eq 0 ]; then
            echo "Database initialization completed successfully!"
            exit 0
          else
            echo "Database initialization failed! Check logs:"
            POD_NAME=$(kubectl get pods -n template-fastapi-app -l component=db-init -o jsonpath='{.items[0].metadata.name}')
            if [ -n "$POD_NAME" ]; then
              kubectl logs -n template-fastapi-app $POD_NAME
            else
              echo "Cannot find database initialization pod to display logs."
            fi
            exit 1
          fi

profiles:
- name: dev
  activation:
  - command: dev
  patches:
  - op: add
    path: /build/local/push
    value: false
  - op: add
    path: /deploy/kubectl/flags
    value:
      apply:
      - --validate=false
      - --force=true

- name: run
  activation:
  - command: run

# Create a profile to skip database initialization if needed
- name: skip-db-init
  patches:
  - op: add
    path: /verify
    value: []

- name: debug
  activation:
  - command: debug
  patches:
  - op: add
    path: /build/artifacts/0/custom/buildCommand
    value: |
      # Navigate to monorepo root first
      MONOREPO_ROOT=$(cd ../../.. && pwd)
      cd $MONOREPO_ROOT
      
      # Then build the tarball with debug flags
      bazel build //projects/template/template_fastapi_app:image_tarball --compilation_mode=dbg
      
      # Extract the tarball
      TEMP_DIR=$(mktemp -d)
      tar -xf bazel-bin/projects/template/template_fastapi_app/image_tarball.tar -C $TEMP_DIR
      
      # Verify contents were extracted correctly
      echo "Extracted files:"
      ls -la $TEMP_DIR
      
      # If Dockerfile doesn't exist, rename Dockerfile.bazel to Dockerfile
      if [ ! -f "$TEMP_DIR/Dockerfile" ] && [ -f "$TEMP_DIR/Dockerfile.bazel" ]; then
        echo "Renaming Dockerfile.bazel to Dockerfile"
        cp $TEMP_DIR/Dockerfile.bazel $TEMP_DIR/Dockerfile
      fi
      
      # Build the Docker image with debug arguments
      docker build -t $IMAGE $TEMP_DIR --build-arg COMPILATION_MODE=dbg
      
      # Clean up
      rm -rf $TEMP_DIR

portForward:
  - resourceType: service
    resourceName: template-fastapi-app
    port: 80
    localPort: 8000
  - resourceType: service
    resourceName: postgres
    port: 5432
    localPort: 5432
  - resourceType: service
    resourceName: otel-collector
    port: 4317
    localPort: 4317
  - resourceType: service
    resourceName: otel-collector
    port: 16686
    localPort: 16686
