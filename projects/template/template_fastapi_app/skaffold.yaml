apiVersion: skaffold/v4beta6
kind: Config
metadata:
  name: template-fastapi-app

build:
  artifacts:
    - image: template-fastapi-app
      custom:
        buildCommand: |
          # Navigate to monorepo root first
          MONOREPO_ROOT=$(cd ../../.. && pwd)
          cd $MONOREPO_ROOT

          # Run code tests before building artifacts
          bazel test //projects/template/template_fastapi_app/...

          # Then build the tarball
          bazel build //projects/template/template_fastapi_app:image_tarball

          # Extract the tarball
          TEMP_DIR=$(mktemp -d)
          tar -xf bazel-bin/projects/template/template_fastapi_app/image_tarball.tar -C $TEMP_DIR

          # Verify contents were extracted correctly
          echo "Extracted files:"
          ls -la $TEMP_DIR

          # If Dockerfile doesn't exist, rename Dockerfile.bazel to Dockerfile
          if [ ! -f "$TEMP_DIR/Dockerfile" ] && [ -f "$TEMP_DIR/Dockerfile.bazel" ]; then
            echo "Renaming Dockerfile.bazel to Dockerfile"
            cp $TEMP_DIR/Dockerfile.bazel $TEMP_DIR/Dockerfile
          fi

          # Build the Docker image
          docker build -t $IMAGE $TEMP_DIR

          # Clean up
          rm -rf $TEMP_DIR
        dependencies:
          paths:
            - "**/*"
  local:
    push: false
    useBuildkit: false

manifests:
  rawYaml:
    - kubernetes/*.yaml

deploy:
  kubectl: {}
  # Add post-deployment verification for database initialization
  statusCheck: true

# Define custom actions at the root level of the configuration
customActions:
  - name: enable-istio-injection
    containers:
      - name: kubectl-istio-setup
        image: bitnami/kubectl:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "=== SETTING UP ISTIO INTEGRATION ==="
            
            # Create namespace if it doesn't exist
            kubectl get namespace template-fastapi-app || kubectl create namespace template-fastapi-app
            
            # Enable Istio injection on the namespace
            echo "Enabling Istio injection on namespace template-fastapi-app..."
            kubectl label namespace template-fastapi-app istio-injection=enabled --overwrite
            
            # Check if Istio is installed
            if ! kubectl get namespace istio-system &>/dev/null; then
              echo "WARNING: Istio doesn't appear to be installed in the cluster."
              echo "Rate limiting functionality will not work without Istio."
              echo "Consider installing Istio with: istioctl install --set profile=demo"
            else
              echo "Istio detected in the cluster."
            fi
    executionMode:
      kubernetesCluster: {}

# Add verification steps
verify:
  - name: smoke-test
    container:
      name: curl-smoke-test
      image: curlimages/curl:latest
      command: ["/bin/sh", "-c"]
      args:
        - |
          echo "Waiting for application to be ready..."
          sleep 10

          MAX_RETRIES=2
          RETRY_COUNT=0
          SUCCESS=false

          while [ $RETRY_COUNT -le $MAX_RETRIES ] && [ "$SUCCESS" = false ]; do
            SLEEP_DURATION=$((RANDOM % 5 + 5)) # Sleep between 5 and 10 seconds
            echo "Running smoke test (attempt $(($RETRY_COUNT+1))/$((MAX_RETRIES+1)))..."

            
            # Test health endpoint
            echo "Testing health endpoint..."
            HEALTH_RESPONSE=$(curl -s "${HEALTH_ENDPOINT:-http://template-fastapi-app.template-fastapi-app.svc.cluster.local/health}")
            echo "Health response: $HEALTH_RESPONSE"
            
            if echo "$HEALTH_RESPONSE" | grep -q "ok"; then
              echo "Health check passed!"
              
              # Test login endpoint
              echo "Testing login endpoint..."
              LOGIN_RESPONSE=$(curl -s -X 'POST' "${LOGIN_ENDPOINT:-http://template-fastapi-app.template-fastapi-app.svc.cluster.local/api/v1/login/access-token}" -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=admin@example.com&password=admin')
              echo "Login response: $LOGIN_RESPONSE"
              
              if echo "$LOGIN_RESPONSE" | grep -q "access_token"; then
                echo "==============================================" 
                echo "Login successful, authentication token received!"
                echo "=============================================="
                
                # Extract the token
                TOKEN=$(echo "$LOGIN_RESPONSE" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)
                
                # Test users endpoint
                echo "Testing users endpoint..."
                USERS_RESPONSE=$(curl -s -X 'GET' "${USERS_ENDPOINT:-http://template-fastapi-app.template-fastapi-app.svc.cluster.local/api/v1/users/}" -H 'accept: application/json' -H "Authorization: Bearer $TOKEN")
                echo "Users response: $USERS_RESPONSE"
                
                if echo "$USERS_RESPONSE" | grep -q "admin@example.com"; then
                  echo "Users endpoint test passed!"
                  
                  # Test key management endpoint
                  echo "Testing key management status endpoint..."
                  KEY_MGMT_RESPONSE=$(curl -s -X 'GET' "${KEY_MGMT_ENDPOINT:-http://template-fastapi-app.template-fastapi-app.svc.cluster.local/api/v1/key-management/status}" -H 'accept: application/json' -H "Authorization: Bearer $TOKEN")
                  echo "Key management status response: $KEY_MGMT_RESPONSE"
                  
                  if echo "$KEY_MGMT_RESPONSE" | grep -q "jwt_keys"; then
                    echo "Key management status test passed!"
                    SUCCESS=true
                  else
                    echo "Key management status test failed!"
                  fi
                else
                  echo "Users endpoint test failed!"
                fi
              else
                echo "Login test failed - could not get authentication token!"
              fi
            else
              echo "Health check failed!"
            fi
            
            if [ "$SUCCESS" = false ]; then
              RETRY_COUNT=$((RETRY_COUNT+1))
              if [ $RETRY_COUNT -le $MAX_RETRIES ]; then
                echo "Smoke test failed, retrying in 10 seconds..."
                sleep 10
              else
                echo "Smoke test failed after $((MAX_RETRIES+1)) attempts! Last error: $?"
                exit 1
              fi
            fi
          done

          # Final success message
          if [ "$SUCCESS" = true ]; then
            echo "API verification successful! All tests passed."
            exit 0
          else
            echo "API verification failed!"
            exit 1
          fi
    executionMode:
      kubernetesCluster: {}
        # Does not do what we expect, so we're not using it
        # overrides: '{"spec": {"template": {"spec": {"serviceAccountName": "namespace-manager"}}}}'
        # jobManifestPath: kubernetes/verify/curl-smoke-test.yaml

portForward:
  - resourceType: service
    resourceName: template-fastapi-app
    port: 80
    localPort: 8000
  - resourceType: service
    resourceName: postgres
    port: 5432
    localPort: 5432
  - resourceType: service
    resourceName: otel-collector
    port: 4317
    localPort: 4317
  - resourceType: service
    resourceName: otel-collector
    port: 16686
    localPort: 16686

profiles:
  - name: dev
    activation:
      - command: dev
    patches:
      - op: add
        path: /build/local/push
        value: false
      - op: add
        path: /deploy/kubectl/flags
        value:
          apply:
            - --validate=false
            - --force=true
            
  - name: run
    activation:
      - command: run

---
apiVersion: skaffold/v4beta6
kind: Config
metadata:
  name: bootstrap
# requires:
#   - configs:
#       - template-fastapi-app
manifests:
  rawYaml:
    - kubernetes/bootstrap/rbac.yaml
    - kubernetes/bootstrap/namespace.yaml
deploy:
  kubectl: {}
---
apiVersion: skaffold/v4beta6
kind: Config
metadata:
  name: servicemesh
manifests:
  rawYaml:
    - kubernetes/istio/*.yaml
    # - kubernetes/istio/istio-setup-job.yaml
deploy:
  kubectl: {}
---
apiVersion: skaffold/v4beta6
kind: Config
metadata:
  name: debug
manifests:
  rawYaml:
    - kubernetes/debug/debug-job.yaml
deploy:
  kubectl: {}
# ---
# apiVersion: skaffold/v4beta6
# kind: Config
# metadata:
#   name: loadgenerator
# requires:
#   - configs:
#       - template-fastapi-app
# build:
#   platforms: ["linux/amd64"]
#   artifacts:
#     - image: loadgenerator
#       context: src/loadgenerator
# manifests:
#   rawYaml:
#     - ./kubernetes-manifests/loadgenerator.yaml
# deploy:
#   kubectl: {}
# profiles:
#   - name: gcb
#     build:
#       googleCloudBuild:
#         diskSizeGb: 300
#         machineType: N1_HIGHCPU_32
#         timeout: 4000s