apiVersion: skaffold/v4beta6
kind: Config
metadata:
  name: template-fastapi-app

build:
  artifacts:
    - image: template-fastapi-app
      custom:
        buildCommand: |
          # Navigate to monorepo root first
          MONOREPO_ROOT=$(cd ../../.. && pwd)
          cd $MONOREPO_ROOT

          # Then build the tarball
          bazel build //projects/template/template_fastapi_app:image_tarball

          # Extract the tarball
          TEMP_DIR=$(mktemp -d)
          tar -xf bazel-bin/projects/template/template_fastapi_app/image_tarball.tar -C $TEMP_DIR

          # Verify contents were extracted correctly
          echo "Extracted files:"
          ls -la $TEMP_DIR

          # If Dockerfile doesn't exist, rename Dockerfile.bazel to Dockerfile
          if [ ! -f "$TEMP_DIR/Dockerfile" ] && [ -f "$TEMP_DIR/Dockerfile.bazel" ]; then
            echo "Renaming Dockerfile.bazel to Dockerfile"
            cp $TEMP_DIR/Dockerfile.bazel $TEMP_DIR/Dockerfile
          fi

          # Build the Docker image
          docker build -t $IMAGE $TEMP_DIR

          # Clean up
          rm -rf $TEMP_DIR
        dependencies:
          paths:
            - "**/*"
  local:
    push: false
    useBuildkit: false

manifests:
  rawYaml:
    - kubernetes/*.yaml

deploy:
  kubectl: {}
  # Add post-deployment verification for database initialization
  statusCheck: true

# Add verification steps
verify:
  - name: smoke-test
    container:
      name: curl-smoke-test
      image: curlimages/curl:latest
      command: ["/bin/sh", "-c"]
      args:
        - |
          echo "Waiting for application to be ready..."
          sleep 10

          MAX_RETRIES=2
          RETRY_COUNT=0
          SUCCESS=false

          while [ $RETRY_COUNT -le $MAX_RETRIES ] && [ "$SUCCESS" = false ]; do
            SLEEP_DURATION=$((RANDOM % 5 + 5)) # Sleep between 5 and 10 seconds
            echo "Running smoke test (attempt $(($RETRY_COUNT+1))/$((MAX_RETRIES+1)))..."

            
            # Test health endpoint
            echo "Testing health endpoint..."
            HEALTH_RESPONSE=$(curl -s "${HEALTH_ENDPOINT:-http://template-fastapi-app.template-fastapi-app.svc.cluster.local/health}")
            echo "Health response: $HEALTH_RESPONSE"
            
            if echo "$HEALTH_RESPONSE" | grep -q "ok"; then
              echo "Health check passed!"
              
              # Test login endpoint
              echo "Testing login endpoint..."
              LOGIN_RESPONSE=$(curl -s -X 'POST' "${LOGIN_ENDPOINT:-http://template-fastapi-app.template-fastapi-app.svc.cluster.local/api/v1/login/access-token}" -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=admin@example.com&password=admin')
              echo "Login response: $LOGIN_RESPONSE"
              
              if echo "$LOGIN_RESPONSE" | grep -q "access_token"; then
                echo "==============================================" 
                echo "Login successful, authentication token received!"
                echo "=============================================="
                
                # Extract the token
                TOKEN=$(echo "$LOGIN_RESPONSE" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)
                
                # Test users endpoint
                echo "Testing users endpoint..."
                USERS_RESPONSE=$(curl -s -X 'GET' "${USERS_ENDPOINT:-http://template-fastapi-app.template-fastapi-app.svc.cluster.local/api/v1/users/}" -H 'accept: application/json' -H "Authorization: Bearer $TOKEN")
                echo "Users response: $USERS_RESPONSE"
                
                if echo "$USERS_RESPONSE" | grep -q "admin@example.com"; then
                  echo "Users endpoint test passed!"
                  
                  # Test key management endpoint
                  echo "Testing key management status endpoint..."
                  KEY_MGMT_RESPONSE=$(curl -s -X 'GET' "${KEY_MGMT_ENDPOINT:-http://template-fastapi-app.template-fastapi-app.svc.cluster.local/api/v1/key-management/status}" -H 'accept: application/json' -H "Authorization: Bearer $TOKEN")
                  echo "Key management status response: $KEY_MGMT_RESPONSE"
                  
                  if echo "$KEY_MGMT_RESPONSE" | grep -q "jwt_keys"; then
                    echo "Key management status test passed!"
                    SUCCESS=true
                  else
                    echo "Key management status test failed!"
                  fi
                else
                  echo "Users endpoint test failed!"
                fi
              else
                echo "Login test failed - could not get authentication token!"
              fi
            else
              echo "Health check failed!"
            fi
            
            if [ "$SUCCESS" = false ]; then
              RETRY_COUNT=$((RETRY_COUNT+1))
              if [ $RETRY_COUNT -le $MAX_RETRIES ]; then
                echo "Smoke test failed, retrying in 10 seconds..."
                sleep 10
              else
                echo "Smoke test failed after $((MAX_RETRIES+1)) attempts! Last error: $?"
                exit 1
              fi
            fi
          done

          # Final success message
          if [ "$SUCCESS" = true ]; then
            echo "API verification successful! All tests passed."
            exit 0
          else
            echo "API verification failed!"
            exit 1
          fi
    # Do not remove this executionMode block since we need to run the tests in the cluster.
    # Ignore the linter warning for this line.
    executionMode:
      kubernetesCluster: {}

portForward:
  - resourceType: service
    resourceName: template-fastapi-app
    port: 80
    localPort: 8000
  - resourceType: service
    resourceName: postgres
    port: 5432
    localPort: 5432
  - resourceType: service
    resourceName: otel-collector
    port: 4317
    localPort: 4317
  - resourceType: service
    resourceName: otel-collector
    port: 16686
    localPort: 16686

profiles:
  - name: dev
    activation:
      - command: dev
    patches:
      - op: add
        path: /build/local/push
        value: false
      - op: add
        path: /deploy/kubectl/flags
        value:
          apply:
            - --validate=false
            - --force=true
  - name: run
    activation:
      - command: run
  - name: skip-db-init
    patches:
      - op: add
        path: /verify
        value:
          - name: smoke-test
            container:
              name: curl-smoke-test
              image: curlimages/curl:latest
              command: ["/bin/sh", "-c"]
              args:
                - |
                  echo "Waiting for application to be ready..."
                  sleep 15
                  
                  # Try different service naming approaches
                  SUCCESS=false
                  
                  # Test different endpoint formats
                  echo "Testing health endpoint at http://template-fastapi-app/health"
                  HEALTH_RESPONSE=$(curl -s http://template-fastapi-app/health)
                  echo "Response: $HEALTH_RESPONSE"
                  if echo "$HEALTH_RESPONSE" | grep -q "ok"; then
                    echo "Health check passed!"
                    SUCCESS=true
                  else
                    echo "Health check failed, trying alternate endpoint..."
                    
                    echo "Testing health endpoint at http://template-fastapi-app.template-fastapi-app/health"
                    HEALTH_RESPONSE=$(curl -s http://template-fastapi-app.template-fastapi-app/health)
                    echo "Response: $HEALTH_RESPONSE"
                    if echo "$HEALTH_RESPONSE" | grep -q "ok"; then
                      echo "Health check passed!"
                      SUCCESS=true
                    else
                      echo "Health check failed, trying alternate endpoint..."
                      
                      echo "Testing health endpoint at http://template-fastapi-app.template-fastapi-app.svc/health"
                      HEALTH_RESPONSE=$(curl -s http://template-fastapi-app.template-fastapi-app.svc/health)
                      echo "Response: $HEALTH_RESPONSE"
                      if echo "$HEALTH_RESPONSE" | grep -q "ok"; then
                        echo "Health check passed!"
                        SUCCESS=true
                      else
                        echo "Health check failed, trying alternate endpoint..."
                        
                        echo "Testing health endpoint at http://template-fastapi-app.template-fastapi-app.svc.cluster.local/health"
                        HEALTH_RESPONSE=$(curl -s http://template-fastapi-app.template-fastapi-app.svc.cluster.local/health)
                        echo "Response: $HEALTH_RESPONSE"
                        if echo "$HEALTH_RESPONSE" | grep -q "ok"; then
                          echo "Health check passed!"
                          SUCCESS=true
                        else
                          # Try direct IP address
                          echo "Trying direct services lookup via nslookup..."
                          nslookup template-fastapi-app
                          
                          echo "Testing direct IP, looking up cluster IPs..."
                          CLUSTER_IPS=$(getent hosts template-fastapi-app | awk '{print $1}')
                          echo "Found IPs: $CLUSTER_IPS"
                          
                          # Try a direct IP approach
                          echo "Testing health endpoint at http://10.43.189.106/health (last known service IP)"
                          HEALTH_RESPONSE=$(curl -s --connect-timeout 5 http://10.43.189.106/health)
                          echo "Response: $HEALTH_RESPONSE"
                          if echo "$HEALTH_RESPONSE" | grep -q "ok"; then
                            echo "Health check passed!"
                            SUCCESS=true
                          fi
                        fi
                      fi
                    fi
                  fi
                  
                  # Final success message
                  if [ "$SUCCESS" = true ]; then
                    echo "API verification successful! Health check passed."
                    exit 0
                  else
                    echo "API verification failed!"
                    exit 1
                  fi
            executionMode:
              kubernetesCluster: {}
              
  # Profile for deploying Istio rate limiting using custom actions
  - name: istio-rate-limit-actions
    patches:
      - op: add
        path: /manifests/rawYaml
        value:
          - kubernetes/00-istio-namespace.yaml
          - kubernetes/*.yaml
      - op: add
        path: /customActions
        value:
          - name: enable-istio-injection
            containers:
              - name: kubectl-injection
                image: bitnami/kubectl:latest
                command: ["kubectl"]
                args: ["label", "namespace", "template-fastapi-app", "istio-injection=enabled", "--overwrite"]
            executeAt:
              - preDeploy
          - name: verify-rate-limiting
            containers:
              - name: kubectl-verify
                image: bitnami/kubectl:latest
                command: ["/bin/sh", "-c"]
                args:
                  - |
                    echo "Waiting for services to be ready..."
                    sleep 10
                    
                    # Delete the test job if it exists
                    kubectl delete job rate-limit-test -n template-fastapi-app --ignore-not-found
                    
                    # Wait for pods to be ready
                    kubectl wait --namespace template-fastapi-app --for=condition=ready pod --selector=app=template-fastapi-app --timeout=60s
                    
                    # Apply the rate limit verification job
                    kubectl apply -f kubernetes/istio-rate-limit-verify.yaml
                    
                    # Follow the job logs
                    echo "Following rate limit test job logs..."
                    kubectl wait --namespace template-fastapi-app --for=condition=complete job/rate-limit-test --timeout=180s || true
                    kubectl logs -n template-fastapi-app -l job-name=rate-limit-test --follow
            executeAt:
              - postDeploy

  # Profile for deploying without Istio resources
  - name: no-istio
    patches:
      - op: add
        path: /manifests/rawYaml
        value:
          - kubernetes/deployment.yaml
          - kubernetes/service.yaml
          - kubernetes/configmap.yaml
          - kubernetes/secrets.yaml
          - kubernetes/postgres-pvc.yaml
          - kubernetes/postgres-deployment.yaml
          - kubernetes/postgres-service.yaml
          - kubernetes/db-init-job.yaml
      - op: add
        path: /customActions
        value:
          - name: verify-deployment
            containers:
              - name: kubectl-verify-deployment
                image: bitnami/kubectl:latest
                command: ["/bin/sh", "-c"]
                args:
                  - |
                    echo "Waiting for services to be ready..."
                    sleep 10
                    
                    # Wait for pods to be ready
                    kubectl wait --namespace template-fastapi-app --for=condition=ready pod --selector=app=template-fastapi-app --timeout=60s
                    
                    # Check the health endpoint
                    kubectl exec -n template-fastapi-app deploy/template-fastapi-app -- curl -s http://localhost:8000/health
                    
                    # Check if the app is running properly
                    if kubectl exec -n template-fastapi-app deploy/template-fastapi-app -- curl -s http://localhost:8000/health | grep -q "ok"; then
                      echo "=== SUCCESS: Application is healthy ==="
                      exit 0
                    else
                      echo "ERROR: Application health check failed"
                      exit 1
                    fi
            executeAt:
              - postDeploy
