apiVersion: skaffold/v4beta6
kind: Config
metadata:
  name: template-fastapi-app

build:
  artifacts:
    - image: template-fastapi-app
      custom:
        buildCommand: |
          # Navigate to monorepo root first
          MONOREPO_ROOT=$(cd ../../.. && pwd)
          cd $MONOREPO_ROOT

          # Run code tests before building artifacts
          bazel test //projects/template/template_fastapi_app/...

          # Then build the tarball
          bazel build //projects/template/template_fastapi_app:image_tarball

          # Extract the tarball
          TEMP_DIR=$(mktemp -d)
          tar -xf bazel-bin/projects/template/template_fastapi_app/image_tarball.tar -C $TEMP_DIR

          # Verify contents were extracted correctly
          echo "Extracted files:"
          ls -la $TEMP_DIR

          # If Dockerfile doesn't exist, rename Dockerfile.bazel to Dockerfile
          if [ ! -f "$TEMP_DIR/Dockerfile" ] && [ -f "$TEMP_DIR/Dockerfile.bazel" ]; then
            echo "Renaming Dockerfile.bazel to Dockerfile"
            cp $TEMP_DIR/Dockerfile.bazel $TEMP_DIR/Dockerfile
          fi

          # Build the Docker image
          docker build -t $IMAGE $TEMP_DIR

          # Clean up
          rm -rf $TEMP_DIR
        dependencies:
          paths:
            - "**/*"
  local:
    push: false
    useBuildkit: false

manifests:
  rawYaml:
    - kubernetes/bootstrap/namespace.yaml
    - kubernetes/db-migrations-job.yaml  # Include our migrations job
    - kubernetes/*.yaml  # Include all other Kubernetes resources

deploy:
  kubectl: {}
  # Add post-deployment verification for database initialization
  statusCheck: true


# Define custom actions at the root level of the configuration
customActions:
  - name: enable-istio-injection
    containers:
      - name: kubectl-istio-setup
        image: bitnami/kubectl:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "=== SETTING UP ISTIO INTEGRATION ==="
            
            # Create namespace if it doesn't exist
            kubectl get namespace template-fastapi-app || kubectl create namespace template-fastapi-app
            
            # Enable Istio injection on the namespace
            echo "Enabling Istio injection on namespace template-fastapi-app..."
            kubectl label namespace template-fastapi-app istio-injection=enabled --overwrite
            
            # Check if Istio is installed
            if ! kubectl get namespace istio-system &>/dev/null; then
              echo "WARNING: Istio doesn't appear to be installed in the cluster."
              echo "Rate limiting functionality will not work without Istio."
              echo "Consider installing Istio with: istioctl install --set profile=demo"
            else
              echo "Istio detected in the cluster."
            fi
    executionMode:
      kubernetesCluster: {}

# Add verification steps
verify:
  - name: smoke-test
    container:
      name: curl-smoke-test
      image: curlimages/curl:latest
      command: ["/bin/sh", "-c"]
      args:
        - |
          echo "Waiting for application to be ready..."
          sleep 10

          MAX_RETRIES=2
          RETRY_COUNT=0
          SUCCESS=false

          while [ $RETRY_COUNT -le $MAX_RETRIES ] && [ "$SUCCESS" = false ]; do
            SLEEP_DURATION=$((RANDOM % 5 + 5)) # Sleep between 5 and 10 seconds
            echo "Running smoke test (attempt $(($RETRY_COUNT+1))/$((MAX_RETRIES+1)))..."

            
            # Test health endpoint
            echo "Testing health endpoint..."
            HEALTH_RESPONSE=$(curl -s "${HEALTH_ENDPOINT:-http://template-fastapi-app.template-fastapi-app.svc.cluster.local/health}")
            echo "Health response: $HEALTH_RESPONSE"
            
            if echo "$HEALTH_RESPONSE" | grep -q "ok"; then
              echo "Health check passed!"
              
              # Test login endpoint
              echo "Testing login endpoint..."
              LOGIN_RESPONSE=$(curl -s -X 'POST' "${LOGIN_ENDPOINT:-http://template-fastapi-app.template-fastapi-app.svc.cluster.local/api/v1/login/access-token}" -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=admin@example.com&password=admin')
              echo "Login response: $LOGIN_RESPONSE"
              
              if echo "$LOGIN_RESPONSE" | grep -q "access_token"; then
                echo "==============================================" 
                echo "Login successful, authentication token received!"
                echo "=============================================="
                
                # Extract the token
                TOKEN=$(echo "$LOGIN_RESPONSE" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)
                
                # Test users endpoint
                echo "Testing users endpoint..."
                USERS_RESPONSE=$(curl -s -X 'GET' "${USERS_ENDPOINT:-http://template-fastapi-app.template-fastapi-app.svc.cluster.local/api/v1/users/}" -H 'accept: application/json' -H "Authorization: Bearer $TOKEN")
                echo "Users response: $USERS_RESPONSE"
                
                if echo "$USERS_RESPONSE" | grep -q "admin@example.com"; then
                  echo "Users endpoint test passed!"
                  
                  # Test key management endpoint
                  echo "Testing key management status endpoint..."
                  KEY_MGMT_RESPONSE=$(curl -s -X 'GET' "${KEY_MGMT_ENDPOINT:-http://template-fastapi-app.template-fastapi-app.svc.cluster.local/api/v1/key-management/status}" -H 'accept: application/json' -H "Authorization: Bearer $TOKEN")
                  echo "Key management status response: $KEY_MGMT_RESPONSE"
                  
                  if echo "$KEY_MGMT_RESPONSE" | grep -q "jwt_keys"; then
                    echo "Key management status test passed!"
                    SUCCESS=true
                  else
                    echo "Key management status test failed!"
                  fi
                else
                  echo "Users endpoint test failed!"
                fi
              else
                echo "Login test failed - could not get authentication token!"
              fi
            else
              echo "Health check failed!"
            fi
            
            if [ "$SUCCESS" = false ]; then
              RETRY_COUNT=$((RETRY_COUNT+1))
              if [ $RETRY_COUNT -le $MAX_RETRIES ]; then
                echo "Smoke test failed, retrying in 10 seconds..."
                sleep 10
              else
                echo "Smoke test failed after $((MAX_RETRIES+1)) attempts! Last error: $?"
                exit 1
              fi
            fi
          done

          # Final success message
          if [ "$SUCCESS" = true ]; then
            echo "API verification successful! All tests passed."
            exit 0
          else
            echo "API verification failed!"
            exit 1
          fi
    executionMode:
      kubernetesCluster: {}

portForward:
  - resourceType: service
    resourceName: template-fastapi-app
    port: 80
    localPort: 8000
  - resourceType: service
    resourceName: postgres
    port: 5432
    localPort: 5432
  - resourceType: service
    resourceName: otel-collector
    port: 4317
    localPort: 4317
  - resourceType: service
    resourceName: otel-collector
    port: 16686
    localPort: 16686

profiles:
  - name: dev
    activation:
      - command: dev
    patches:
      - op: add
        path: /build/local/push
        value: false
      - op: add
        path: /deploy/kubectl/flags
        value:
          apply:
            - --validate=false
            - --force=true
            
  - name: run
    activation:
      - command: run

---
apiVersion: skaffold/v4beta6
kind: Config
metadata:
  name: bootstrap
# requires:
#   - configs:
#       - template-fastapi-app
manifests:
  rawYaml:
    - kubernetes/bootstrap/rbac.yaml
    - kubernetes/bootstrap/namespace.yaml
deploy:
  kubectl: {}
---
apiVersion: skaffold/v4beta6
kind: Config
metadata:
  name: servicemesh-namespace
manifests:
  rawYaml:
    - kubernetes/istio/namespace.yaml
deploy:
  kubectl: {}
---
apiVersion: skaffold/v4beta6
kind: Config
metadata:
  name: servicemesh
requires:
  - configs:
      - servicemesh-namespace
customActions:
  - name: apply-rate-limiting
    containers:
      - name: istio-setup
        image: alpine:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            # Install required tools
            apk add --no-cache curl kubectl
            
            # Create necessary directories
            mkdir -p /tmp/istio
            
            # Download and install istioctl if needed
            if [ ! -f "/tmp/istio/bin/istioctl" ]; then
              echo "Downloading Istio..."
              curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.25.0 TARGET_ARCH=x86_64 sh -
              mv istio-1.25.0/bin/istioctl /tmp/istio/bin/
              chmod +x /tmp/istio/bin/istioctl
            fi
            
            # Create istio-system namespace if it doesn't exist
            kubectl create namespace istio-system --dry-run=client -o yaml | kubectl apply -f -
            
            # Install Istio with demo profile
            /tmp/istio/bin/istioctl install --set profile=demo --set hub=docker.io/istio --set tag=1.25.0 -y
            
            # Enable istio injection for the template-fastapi-app namespace
            kubectl create namespace template-fastapi-app --dry-run=client -o yaml | kubectl apply -f -
            kubectl label namespace template-fastapi-app istio-injection=enabled --overwrite
            
            # Create or update Gateway
            cat > /tmp/gateway.yaml << 'EOF'
            apiVersion: networking.istio.io/v1alpha3
            kind: Gateway
            metadata:
              name: template-fastapi-gateway
              namespace: template-fastapi-app
            spec:
              selector:
                istio: ingressgateway
              servers:
              - port:
                  number: 80
                  name: http
                  protocol: HTTP
                hosts:
                - "*"
            ---
            apiVersion: networking.istio.io/v1alpha3
            kind: VirtualService
            metadata:
              name: template-fastapi-app
              namespace: template-fastapi-app
            spec:
              hosts:
              - "*"
              gateways:
              - template-fastapi-gateway
              http:
              - match:
                - uri:
                    prefix: /
                route:
                - destination:
                    host: template-fastapi-app
                    port:
                      number: 80
            EOF
            kubectl apply -f /tmp/gateway.yaml
            
            # Create or update rate limiting configuration
            cat > /tmp/rate-limiting.yaml << 'EOF'
            apiVersion: networking.istio.io/v1alpha3
            kind: EnvoyFilter
            metadata:
              name: filter-ratelimit
              namespace: istio-system
            spec:
              workloadSelector:
                labels:
                  istio: ingressgateway
              configPatches:
                - applyTo: HTTP_FILTER
                  match:
                    context: GATEWAY
                    listener:
                      filterChain:
                        filter:
                          name: "envoy.filters.network.http_connection_manager"
                          subFilter:
                            name: "envoy.filters.http.router"
                  patch:
                    operation: INSERT_BEFORE
                    value:
                      name: envoy.filters.http.ratelimit
                      typed_config:
                        "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
                        domain: template-fastapi-rate-limit
                        failure_mode_deny: true
                        rate_limit_service:
                          grpc_service:
                            envoy_grpc:
                              cluster_name: rate_limit_service
                            timeout: 10s
                          transport_api_version: V3
            ---
            apiVersion: networking.istio.io/v1alpha3
            kind: EnvoyFilter
            metadata:
              name: ratelimit-config
              namespace: istio-system
            spec:
              workloadSelector:
                labels:
                  istio: ingressgateway
              configPatches:
                - applyTo: VIRTUAL_HOST
                  match:
                    context: GATEWAY
                    routeConfiguration:
                      vhost:
                        name: "*:80"
                        route:
                          action: ANY
                  patch:
                    operation: MERGE
                    value:
                      rate_limits:
                        - actions:
                          - request_headers:
                              header_name: ":path"
                              descriptor_key: "path"
            ---
            apiVersion: networking.istio.io/v1alpha3
            kind: EnvoyFilter
            metadata:
              name: rate-limit-service
              namespace: istio-system
            spec:
              configPatches:
                - applyTo: CLUSTER
                  match:
                    context: GATEWAY
                  patch:
                    operation: ADD
                    value:
                      name: rate_limit_service
                      type: STRICT_DNS
                      connect_timeout: 10s
                      http2_protocol_options: {}
                      load_assignment:
                        cluster_name: rate_limit_service
                        endpoints:
                          - lb_endpoints:
                              - endpoint:
                                  address:
                                    socket_address:
                                      address: ratelimit.istio-system.svc.cluster.local
                                      port_value: 8081
            ---
            apiVersion: v1
            kind: Service
            metadata:
              name: ratelimit
              namespace: istio-system
            spec:
              selector:
                app: ratelimit
              ports:
              - name: http-port
                port: 8080
                targetPort: 8080
                protocol: TCP
              - name: grpc-port
                port: 8081
                targetPort: 8081
                protocol: TCP
            ---
            apiVersion: v1
            kind: ConfigMap
            metadata:
              name: ratelimit-config
              namespace: istio-system
            data:
              config.yaml: |
                domain: template-fastapi-rate-limit
                descriptors:
                  - key: path
                    value: "/api/v1/items"
                    rate_limit:
                      unit: minute
                      requests_per_unit: 5
                  - key: path
                    value: "/docs"
                    rate_limit:
                      unit: minute
                      requests_per_unit: 10
                  - key: path
                    rate_limit:
                      unit: minute
                      requests_per_unit: 100
            ---
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: ratelimit
              namespace: istio-system
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app: ratelimit
              template:
                metadata:
                  labels:
                    app: ratelimit
                spec:
                  containers:
                  - name: ratelimit
                    image: envoyproxy/ratelimit:6f5de117
                    imagePullPolicy: Always
                    command: ["/bin/ratelimit"]
                    env:
                    - name: LOG_LEVEL
                      value: debug
                    - name: REDIS_SOCKET_TYPE
                      value: tcp
                    - name: REDIS_URL
                      value: redis:6379
                    - name: USE_STATSD
                      value: "false"
                    - name: RUNTIME_ROOT
                      value: /data
                    - name: RUNTIME_SUBDIRECTORY
                      value: ratelimit
                    ports:
                    - containerPort: 8080
                    - containerPort: 8081
                    - containerPort: 6070
                    volumeMounts:
                    - name: config-volume
                      mountPath: /data/ratelimit/config/config.yaml
                      subPath: config.yaml
                  volumes:
                  - name: config-volume
                    configMap:
                      name: ratelimit-config
            ---
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: redis
              namespace: istio-system
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app: redis
              template:
                metadata:
                  labels:
                    app: redis
                spec:
                  containers:
                  - image: redis:alpine
                    imagePullPolicy: Always
                    name: redis
                    ports:
                    - name: redis
                      containerPort: 6379
            ---
            apiVersion: v1
            kind: Service
            metadata:
              name: redis
              namespace: istio-system
            spec:
              ports:
              - name: redis
                port: 6379
                targetPort: 6379
                protocol: TCP
              selector:
                app: redis
            EOF
            kubectl apply -f /tmp/rate-limiting.yaml
            
            # Restart deployments to ensure sidecar injection 
            if kubectl get deployment -n template-fastapi-app template-fastapi-app 2>/dev/null; then
              echo "Restarting template-fastapi-app deployment to inject Istio sidecar..."
              kubectl rollout restart deployment/template-fastapi-app -n template-fastapi-app
            else
              echo "No template-fastapi-app deployment found. Deploy the application first."
            fi
            
            echo "===================================="
            echo "Istio and rate limiting setup complete!"
            echo "===================================="
            echo "To verify the installation:"
            echo "1. kubectl get pods -n istio-system"
            echo "2. kubectl get gateway,virtualservice -n template-fastapi-app"
            echo "3. Get gateway IP: kubectl get svc -n istio-system istio-ingressgateway"
            echo "4. Test API with: curl http://GATEWAY_IP/"
            echo "5. Test rate limiting: curl http://GATEWAY_IP/api/v1/items (limited to 5 req/min)"
deploy:
  kubectl:
    defaultNamespace: istio-system
  helm:
    releases:
      - name: istio-base
        repo: https://istio-release.storage.googleapis.com/charts
        remoteChart: base
        namespace: istio-system
        createNamespace: true
        version: 1.25.0
        setValues:
          global.istioNamespace: istio-system
        wait: true
        
      - name: istiod
        repo: https://istio-release.storage.googleapis.com/charts
        remoteChart: istiod
        namespace: istio-system
        version: 1.25.0
        wait: true
        setValues:
          global.proxy.resources.requests.cpu: 100m
          global.proxy.resources.requests.memory: 128Mi
          pilot.resources.requests.cpu: 200m
          pilot.resources.requests.memory: 256Mi
        
      - name: istio-ingress
        repo: https://istio-release.storage.googleapis.com/charts
        remoteChart: gateway
        namespace: istio-system
        version: 1.25.0
        wait: true
        setValues:
          service.type: ClusterIP
          
      - name: rate-limit
        repo: https://charts.bitnami.com/bitnami
        remoteChart: redis
        namespace: istio-system
        createNamespace: true
        wait: true
      
profiles:
  - name: dev
    patches:
      - op: add
        path: /deploy/helm/releases/2/setValues/service.type
        value: NodePort
  
  - name: prod
    patches:
      - op: add
        path: /deploy/helm/releases/2/setValues/service.type
        value: LoadBalancer
---
apiVersion: skaffold/v4beta6
kind: Config
metadata:
  name: debug
manifests:
  rawYaml:
    - kubernetes/debug/debug-job.yaml
deploy:
  kubectl: {}
# ---
# apiVersion: skaffold/v4beta6
# kind: Config
# metadata:
#   name: loadgenerator
# requires:
#   - configs:
#       - template-fastapi-app
# build:
#   platforms: ["linux/amd64"]
#   artifacts:
#     - image: loadgenerator
#       context: src/loadgenerator
# manifests:
#   rawYaml:
#     - ./kubernetes-manifests/loadgenerator.yaml
# deploy:
#   kubectl: {}
# profiles:
#   - name: gcb
#     build:
#       googleCloudBuild:
#         diskSizeGb: 300
#         machineType: N1_HIGHCPU_32
#         timeout: 4000s