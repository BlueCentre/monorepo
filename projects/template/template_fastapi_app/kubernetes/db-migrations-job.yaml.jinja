apiVersion: batch/v1
kind: Job
metadata:
  name: db-migrations-job
  namespace: {{ (project_dash or project_name) | lower | replace('_', '-') }}
  labels:
    app: {{ (project_dash or project_name) | lower | replace('_', '-') }}
    component: db-migrations
  annotations:
    "skaffold.dev/recreate-pods": "true"
spec:
  ttlSecondsAfterFinished: 100
  backoffLimit: 5
  template:
    metadata:
      labels:
        app: {{ (project_dash or project_name) | lower | replace('_', '-') }}
        component: db-migrations
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: wait-for-postgres
        image: postgres:15
        command: ["sh", "-c", "until pg_isready -h cnpg-cluster-rw.cnpg-cluster.svc.cluster.local -p 5432; do echo waiting for postgres; sleep 2; done;"]
      containers:
      - name: db-migrations
        image: {{ (project_dash or project_name) | lower | replace('_', '-') }}
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash", "-c"]
        args:
        - |
          set -eo pipefail

          # Set environment variables
          export PYTHONPATH=/app:/app/src
          
          # Create database tables
          cd /app/src
          echo "Creating database tables with SQLAlchemy..."
          python -c "from app.db.base import Base; from app.db.session import engine; Base.metadata.create_all(bind=engine); print('Database tables created successfully')"
          
          # Generate password hash using Python
          echo "Generating password hash..."
          HASHED_PASSWORD=$(python -c "from passlib.context import CryptContext; print(CryptContext(schemes=['bcrypt'], deprecated='auto').hash('admin'))")
          echo "Password hash generated."
          
          # Install PostgreSQL client for SQL execution
          echo "Installing PostgreSQL client..."
          apt-get update && apt-get install -y postgresql-client
          
          # Create admin user using SQL directly (avoid User model issue)
          echo "Creating admin user with SQL..."
          echo "
          DO \$\$
          BEGIN
              IF NOT EXISTS (SELECT 1 FROM \"user\" WHERE email = 'admin@example.com') THEN
                  INSERT INTO \"user\" (email, hashed_password, full_name, is_active, is_superuser)
                  VALUES ('admin@example.com', '${HASHED_PASSWORD}', 'Admin', TRUE, TRUE);
                  RAISE NOTICE 'Admin user created successfully';
              ELSE
                  RAISE NOTICE 'Admin user already exists';
              END IF;
          END
          \$\$;
          " > /tmp/create_admin.sql
          
          # Execute the SQL file
          PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_SERVER -U $POSTGRES_USER -d $POSTGRES_DB -f /tmp/create_admin.sql
          if [ $? -ne 0 ]; then echo "Failed to execute create_admin.sql"; exit 1; fi
          
          # Verify admin user was created
          echo "Verifying admin user creation..."
          PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_SERVER -U $POSTGRES_USER -d $POSTGRES_DB -c "SELECT id, email, is_superuser FROM \"user\" WHERE email = 'admin@example.com'"
          if [ $? -ne 0 ]; then echo "Failed to verify admin user creation"; exit 1; fi
          
          echo "Database initialization completed."
        env:
        - name: PYTHONPATH
          value: "/app:/app/src"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: {{ (project_dash or project_name) | lower | replace('_', '-') }}-db-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ (project_dash or project_name) | lower | replace('_', '-') }}-db-credentials
              key: password
        - name: POSTGRES_SERVER
          value: "cnpg-cluster-rw.cnpg-cluster.svc.cluster.local"
        - name: POSTGRES_DB
          value: "app"
        - name: SQLALCHEMY_DATABASE_URI
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_SERVER)/$(POSTGRES_DB)"
        - name: PYTHONUNBUFFERED
          value: "1"
        resources:
          limits:
            cpu: "0.5"
            memory: "256Mi"
          requests:
            cpu: "0.1"
            memory: "128Mi"
