# NOTE: This is not needed anymore because we are using the db-migrations-job.yaml
# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: db-init
#   namespace: template-fastapi-app
#   labels:
#     app: template-fastapi-app
#     component: db-init
# spec:
#   ttlSecondsAfterFinished: 100
#   backoffLimit: 3
#   template:
#     metadata:
#       labels:
#         app: template-fastapi-app
#         component: db-init
#     spec:
#       restartPolicy: OnFailure
#       containers:
#       - name: db-init
#         image: template-fastapi-app
#         imagePullPolicy: IfNotPresent
#         command: ["/bin/bash", "-c"]
#         args:
#           - |
#             cd /app/src && \
#             python -c "
#             from app.db.session import SessionLocal, engine; 
#             from app.db.base import Base;
#             from app.core.config import settings;
#             import app.crud as crud;
#             import app.schemas as schemas;
#             import logging;

#             logging.basicConfig(level=logging.INFO);
#             logger = logging.getLogger('db_init');

#             print('Creating database tables...');
#             Base.metadata.create_all(bind=engine);

#             print('Initializing database with default superuser...');
#             db = SessionLocal();
            
#             try:
#                 user = crud.user.get_by_email(db, email=settings.FIRST_SUPERUSER);
#                 if not user:
#                     logger.info('Creating superuser...');
#                     user_in = schemas.UserCreate(
#                         email=settings.FIRST_SUPERUSER,
#                         password=settings.FIRST_SUPERUSER_PASSWORD,
#                         full_name='Initial Superuser',
#                         is_superuser=True,
#                         is_active=True
#                     );
#                     user = crud.user.create(db, obj_in=user_in);
#                     logger.info(f'Superuser created: {user.email}');
#                 else:
#                     logger.info(f'Superuser already exists: {user.email}');
                
#                 # Create sample item if it doesn't exist
#                 item = crud.item.get_by_title(db, title='Sample Item');
#                 if not item:
#                     logger.info('Creating sample item...');
#                     item_in = schemas.ItemCreate(
#                         title='Sample Item',
#                         description='This is a sample item created during database initialization.',
#                         is_active=True
#                     );
#                     item = crud.item.create_with_owner(db, obj_in=item_in, owner_id=user.id);
#                     logger.info(f'Sample item created: {item.title}');
#                 else:
#                     logger.info(f'Sample item already exists: {item.title}');
                
#                 logger.info('Database initialization completed successfully!');
#             except Exception as e:
#                 logger.error(f'Error during database initialization: {e}');
#                 exit(1);
#             finally:
#                 db.close();
#             "
#         env:
#         - name: POSTGRES_SERVER
#           value: postgres
#         - name: POSTGRES_USER
#           valueFrom:
#             secretKeyRef:
#               key: username
#               name: postgres-secret
#         - name: POSTGRES_PASSWORD
#           valueFrom:
#             secretKeyRef:
#               key: password
#               name: postgres-secret
#         - name: POSTGRES_DB
#           value: app
#         - name: SECRET_KEY
#           valueFrom:
#             secretKeyRef:
#               key: secret-key
#               name: app-secret
#         - name: PYTHONPATH
#           value: /app/src
#         resources:
#           limits:
#             cpu: 200m
#             memory: 256Mi
#           requests:
#             cpu: 100m
#             memory: 128Mi 