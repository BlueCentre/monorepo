# {{ project_title }}

{{ project_description }}

## Features

- **Gin Framework**: High-performance HTTP web framework for Go
- **RESTful API**: Clean REST API structure
- **Middleware Support**: Built-in and custom middleware
- **JSON Handling**: Native JSON request/response handling
- **Testing**: Comprehensive test suite
- **Docker Ready**: Containerized for easy deployment

## Usage

```bash
# Build the service (library + binary)
bazel build //projects/go/{{ project_name }}:main

# Run the service
bazel run //projects/go/{{ project_name }}:main

# Run all tests (library + handlers)
bazel test //projects/go/{{ project_name }}:lib_test

# Quick health check after starting (in another shell)
curl -f http://localhost:8080/health
```

## Development

```bash
# Run all tests
bazel test //projects/go/{{ project_name }}:lib_test

# Run with hot reload (if configured)
go run main.go
```

## API Endpoints

- `GET /health` - Health check endpoint
- `GET /api/v1/status` - Service status
- Add your endpoints here...

## Monorepo Integration

This service is fully integrated with the monorepo build system using Bazel.

### Optional Container Image

Container targets are omitted by default because `rules_oci` is currently commented out in `MODULE.bazel`.
To enable container image builds:

1. Uncomment the `rules_oci` bazel_dep in `MODULE.bazel`.
2. Add the load statement to the top of this project's `BUILD.bazel`:
   `load("@rules_oci//oci:defs.bzl", "oci_image", "oci_tarball")`
3. Add (or restore) targets:
   ```python
   oci_image(
	   name = "image",
	   base = "@distroless_base",
	   entrypoint = ["/main"],
	   tars = [":layer"],
   )
   oci_tarball(
	   name = "tarball",
	   image = ":image",
	   repo_tags = ["{{ project_name }}:latest"],
   )
   ```

## Author

Created by {{ author_name }} <{{ author_email }}>

## References

- [Gin Framework Documentation](https://gin-gonic.com/)
- [Copier Templating](https://github.com/copier-org/copier)