#
# Copyright (c) 2017-2021, salesforce.com, inc.
# All rights reserved.
# Licensed under the BSD 3-Clause license.
# For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
#

# NOTE:
#   This sample is embedded in the same workspace as the springboot rule. Therefore references
#   to local path "//springboot" work here. But you will need to change them to:
#   "@rules_spring//springboot" when you consume the official release via http_archive.

# load our Spring Boot rule
load("@rules_spring//springboot:springboot.bzl", "springboot")

# dependencies from other packages in the workspace
lib_deps = [
    "//projects/java/rs_springboot_app/libs/lib1",
    "//projects/java/rs_springboot_app/libs/lib2",
]

# create our deps list for Spring Boot
springboot_deps = [
    # "@rules_spring//springboot/import_bundles:springboot_required_deps",
    # "@maven_springboot_v2//:org_springframework_boot_spring_boot_starter_jetty",
    # "@maven_springboot_v2//:org_springframework_boot_spring_boot_starter_web",
    # "@maven_springboot_v2//:org_springframework_boot_spring_boot_loader_tools",
    # "@maven_springboot_v2//:org_springframework_spring_webmvc",
    "@maven_pojo//:javax_annotation_javax_annotation_api",
    "@maven_springboot_v2//:org_springframework_boot_spring_boot",
    "@maven_springboot_v2//:org_springframework_boot_spring_boot_actuator",
    "@maven_springboot_v2//:org_springframework_boot_spring_boot_actuator_autoconfigure",
    "@maven_springboot_v2//:org_springframework_boot_spring_boot_autoconfigure",
    "@maven_springboot_v2//:org_springframework_boot_spring_boot_loader",
    "@maven_springboot_v2//:org_springframework_boot_spring_boot_loader_tools",
    "@maven_springboot_v2//:org_springframework_boot_spring_boot_starter",
    "@maven_springboot_v2//:org_springframework_boot_spring_boot_starter_logging",
    "@maven_springboot_v2//:org_springframework_boot_spring_boot_starter_jetty",
    # "@maven_springboot_v2//:org_springframework_boot_spring_boot_starter_web",
    # "@maven_springboot_v2//:org_springframework_boot_spring_boot_starter_parent",
    "@maven_springboot_v2//:org_springframework_spring_aop",
    "@maven_springboot_v2//:org_springframework_spring_beans",
    "@maven_springboot_v2//:org_springframework_spring_context",
    "@maven_springboot_v2//:org_springframework_spring_core",
    "@maven_springboot_v2//:org_springframework_spring_expression",
    "@maven_springboot_v2//:org_springframework_spring_web",

    # bring in same dep again as above, but through a different maven_install
    # rule: the springboot rule does not package duplicate deps, first one wins
    # "@spring_boot_starter_jetty//:org_springframework_boot_spring_boot_starter_jetty",
]

# This Java library contains the app code
java_library(
    name = "demoapp_lib",
    srcs = glob(["src/main/java/**/*.java"]),
    resources = glob(["src/main/resources/**"]),
    deps = springboot_deps + lib_deps,
)

test_deps = [
    "@maven_pojo//:junit_junit",
    "@maven_pojo//:org_hamcrest_hamcrest_core",
]

java_test(
   name = "SampleRestUnitTest",
   srcs = ["src/test/java/com/sample/SampleRestUnitTest.java"],
   test_class = "com.sample.SampleRestUnitTest",
   deps = [ ":demoapp_lib" ] + test_deps,
   timeout = "short",
)

# Build the app as a Spring Boot executable jar
springboot(
    name = "demoapp",
    boot_app_class = "com.sample.SampleMain",
    java_library = ":demoapp_lib",

    # DEPS ARE OPTIONAL HERE
    #  The springboot rule inherits all deps and runtime_deps from the java_library
    # deps = [],

    # TO TEST THE DUPE CLASSES FEATURE:
    #   There is an intentionally duplicated class in lib1 and lib2. Do this:
    #   1. set fail_on_duplicate_classes = True
    #   2. comment out lib1 or lib2 in demoapp_dupeclass_allowlist.txt
    #   Build should fail due to the duplicate class.
    # TODO: Line below does not work currently
    # dupeclassescheck_enable = True,
    dupeclassescheck_ignorelist = "demoapp_dupeclass_allowlist.txt",

    # Specify optional JVM args to use when the application is launched with 'bazel run'
    bazelrun_jvm_flags = "-Dcustomprop=gold -DcustomProp2=silver",

    # data files can be made available in the working directory for when the app is launched with bazel run
    bazelrun_data = ["example_data.txt"],

    # run the application in the background (command returns immediately)
    #bazelrun_background = True,

    # you may choose to override the launcher script that is used when you invoke 'bazel run //examples/demoapp'
    bazelrun_script = "custom_bazelrun_script.sh",

    # if you have conflicting classes in dependency jar files, you can define the order in which the jars are loaded
    #  https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-executable-jar-format.html#executable-jar-war-index-files-classpath
    deps_index_file = ":demoapp_classpath.idx",

    # sometimes packagers want to put certain files into the root of the springboot app jar
    # these addins will be copied into the root of the generated springboot jar
    addins = [":info.txt", ":author.txt"],
)

springboottest_deps = [
    "@maven_springboot_v2//:org_springframework_spring_beans",
    "@maven_springboot_v2//:org_springframework_boot_spring_boot_test",
    "@maven_springboot_v2//:org_springframework_spring_test",
]

java_test(
    name = "SampleRestFuncTest",
    srcs = ["src/test/java/com/sample/SampleRestFuncTest.java"],
    test_class = "com.sample.SampleRestFuncTest",
    resources = glob(["src/test/resources/**"]),
    deps = [ ":demoapp_lib" ] + test_deps + springboottest_deps,
    timeout = "short",
)
