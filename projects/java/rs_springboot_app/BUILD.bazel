#
# Copyright (c) 2017-2021, salesforce.com, inc.
# All rights reserved.
# Licensed under the BSD 3-Clause license.
# For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
#

# NOTE:
#   This sample is embedded in the same workspace as the springboot rule. Therefore references
#   to local path "//springboot" work here. But you will need to change them to:
#   "@rules_spring//springboot" when you consume the official release via http_archive.

# load our Spring Boot rule
load("@rules_spring//springboot:springboot.bzl", "springboot")
load(
    "@rules_oci//oci:defs.bzl",
    "oci_image",
    "oci_load",
    "oci_image_index",
    "oci_push",
)
load("@rules_pkg//:pkg.bzl", "pkg_tar")
load("//tools/build:build_info.bzl", "stamped_build_info")

# dependencies from other packages in the workspace
lib_deps = [
    "//projects/java/rs_springboot_app/libs/lib1",
    "//projects/java/rs_springboot_app/libs/lib2",
]



# This Java library contains the app code
java_library(
    name = "demoapp_lib",
    srcs = glob(["src/main/java/**/*.java"]),
    resources = glob(["src/main/resources/**"]) + [":build_info_props"],
    visibility = ["//visibility:public"],
    deps = lib_deps + [
        "@springboot//:org_springframework_boot_spring_boot_starter",
        "@springboot//:org_springframework_boot_spring_boot_starter_web",
        "@springboot//:org_springframework_boot_spring_boot_starter_actuator",
        # Explicit dependencies sometimes required by strict deps
        "@springboot//:org_springframework_boot_spring_boot",
        "@springboot//:org_springframework_boot_spring_boot_autoconfigure",
        "@springboot//:org_springframework_boot_spring_boot_loader",
        "@springboot//:org_springframework_boot_spring_boot_actuator",
        "@springboot//:org_springframework_boot_spring_boot_actuator_autoconfigure",
        "@springboot//:org_springframework_spring_context",
        "@springboot//:org_springframework_spring_core",
        "@springboot//:org_springframework_spring_web",
        "@springboot//:jakarta_annotation_jakarta_annotation_api",
        # Micrometer core explicitly for custom metrics component (StartupMetrics)
        "@springboot//:io_micrometer_micrometer_core",
        # Prometheus registry for /actuator/prometheus endpoint exposure
        "@springboot//:io_micrometer_micrometer_registry_prometheus",
    ],
)

test_deps = [
    # "@maven_pojo//:junit_junit",
    # "@maven_pojo//:org_hamcrest_hamcrest_core",
]

java_test(
    name = "SampleRestUnitTest",
    timeout = "short",
    srcs = ["src/test/java/com/sample/SampleRestUnitTest.java"],
    test_class = "com.sample.SampleRestUnitTest",
    deps = [":demoapp_lib"] + test_deps,
)

springboottest_deps = [
    # "@maven_springboot//:org_springframework_spring_beans",
    # "@maven_springboot//:org_springframework_boot_spring_boot_test",
    # "@maven_springboot//:org_springframework_spring_test",
]

java_test(
    name = "SampleRestFuncTest",
    timeout = "short",
    srcs = ["src/test/java/com/sample/SampleRestFuncTest.java"],
    resources = glob(["src/test/resources/**"]),
    test_class = "com.sample.SampleRestFuncTest",
    deps = [":demoapp_lib"] + test_deps + springboottest_deps,
)

# WebMvc slice test for HealthController endpoints
java_test(
    name = "HealthControllerSliceTest",
    timeout = "short",
    srcs = ["src/test/java/com/sample/HealthControllerSliceTest.java"],
    test_class = "com.sample.HealthControllerSliceTest",
    deps = [
        ":demoapp_lib",
        "@springboot//:org_springframework_boot_spring_boot_starter_test",
        "@springboot//:org_springframework_spring_test",
        "@springboot//:org_springframework_spring_web",
        "@springboot//:org_springframework_spring_beans",
        "@springboot//:org_springframework_boot_spring_boot_test_autoconfigure",
    ] + test_deps,
)

# Full integration test starting real embedded server on random port hitting /actuator/health
# and custom metrics endpoint /actuator/metrics/app.startup.invocations
java_test(
    name = "HealthMetricsIntegrationTest",
    timeout = "short",
    srcs = ["src/test/java/com/sample/HealthMetricsIntegrationTest.java"],
    test_class = "com.sample.HealthMetricsIntegrationTest",
    deps = [
        ":demoapp_lib",
        "@springboot//:org_springframework_boot_spring_boot_starter_test",
        "@springboot//:org_springframework_boot_spring_boot_test_autoconfigure",
        "@springboot//:org_springframework_spring_web",
        "@springboot//:org_springframework_spring_context",
        "@springboot//:org_springframework_boot_spring_boot_test",
        "@springboot//:org_springframework_spring_beans",
        "@springboot//:org_springframework_spring_test",
        "@springboot//:org_assertj_assertj_core",
    ] + test_deps,
)

java_test(
    name = "BuildInfoIntegrationTest",
    timeout = "short",
    srcs = ["src/test/java/com/sample/BuildInfoIntegrationTest.java"],
    test_class = "com.sample.BuildInfoIntegrationTest",
    deps = [
        ":demoapp_lib",
        "@springboot//:org_springframework_boot_spring_boot_starter_test",
        "@springboot//:org_springframework_boot_spring_boot_test_autoconfigure",
        "@springboot//:org_springframework_boot_spring_boot_test",
        "@springboot//:org_springframework_spring_test",
        "@springboot//:org_springframework_spring_beans",
        "@springboot//:org_springframework_spring_context",
        "@springboot//:org_springframework_spring_web",
        "@springboot//:org_assertj_assertj_core",
    ] + test_deps,
)

# Build the app as a Spring Boot executable jar
springboot(
    name = "demoapp",
    boot_app_class = "com.sample.SampleMain",
    java_library = ":demoapp_lib",
    bazelrun_script = "custom_bazelrun_script.sh",
    deps_index_file = ":demoapp_classpath.idx",
    addins = [":info.txt", ":author.txt"],
    dupeclassescheck_ignorelist = "demoapp_dupeclass_allowlist.txt",
    bazelrun_data = ["example_data.txt"],
    bazelrun_jvm_flags = "-Dcustomprop=gold -DcustomProp2=silver",
    visibility = ["//visibility:public"],
)

# NOTE: Using standard distroless base from rules_oci provided repository set.

# Container image using distroless base
pkg_tar(
    name = "demoapp_jar_tar",
    srcs = [":demoapp"],
    mode = "0644",
    package_dir = "app",
)

# Small metadata layer (separate so future changes to labels/env don't invalidate large app layer)
pkg_tar(
    name = "metadata_layer_tar",
    srcs = ["info.txt", "author.txt"],
    mode = "0644",
    package_dir = "meta",
)

# JVM options layer (separate so tuning changes don't invalidate jar layer)
filegroup(
    name = "jvm_args_file",
    srcs = ["jvm/jvm.args"],
)

pkg_tar(
    name = "jvm_args_tar",
    srcs = ["jvm/jvm.args"],
    mode = "0644",
    package_dir = "jvm",
)

# Wrapper launcher script layer (captures hs_err logs)
pkg_tar(
    name = "run_wrapper_tar",
    srcs = ["run.sh"],
    mode = "0755",
    package_dir = "app",
)

## Base single-arch image (linux/amd64). We keep original logical name `demoapp_image`
## for compatibility and create an explicit platform-suffixed alias target
## (`demoapp_image_linux_amd64`) used by the multi-arch index. This allows future
## addition of an arm64 variant without breaking existing users of :demoapp_image.
oci_image(
    name = "demoapp_image",
    base = "@distroless_java17_linux_amd64//:distroless_java17_linux_amd64",
    tars = [":metadata_layer_tar", ":jvm_args_tar", ":demoapp_jar_tar"],
    entrypoint = ["java", "@jvm/jvm.args", "-cp", "app/demoapp.jar", "org.springframework.boot.loader.launch.JarLauncher"],
    env = {"JAVA_TOOL_OPTIONS": "-XX:+UseContainerSupport"},
    user = "nonroot",
    labels = {"org.opencontainers.image.source": "https://github.com/BlueCentre/monorepo"},
)

# Platform-qualified image alias (currently identical to demoapp_image). When adding
# arm64 support, create another oci_image (demoapp_image_linux_arm64) with an arm64
# base image and include it in the index below.
alias(
    name = "demoapp_image_linux_amd64",
    actual = ":demoapp_image",
    visibility = ["//visibility:public"],
)

oci_load(
    name = "demoapp_image_tar",
    image = ":demoapp_image",
    # repo_tags allows docker load to register repository:tag
    repo_tags = ["rs-springboot-app:latest"],
)


# Placeholder multi-arch index (currently single arch) â€“ can be extended by adding platform-specific images
oci_image_index(
    name = "demoapp_image_index",
    # rules_oci expects a label_list, not a dict. We list platform-specific
    # images here (currently only amd64). Add future arm64 variant
    #   :demoapp_image_linux_arm64
    # when created.
    images = [":demoapp_image_linux_amd64"],
)

oci_push(
    name = "demoapp_push",
    image = ":demoapp_image",
    # Provide a repository (without tag); tags are applied below. This avoids the
    # previous analysis failure which lacked repository/repository_file.
    repository = "example.registry/namespace/rs-springboot-app",
    remote_tags = ["dev"],  # Replace / extend (e.g. add git SHA) or use a tag file for stamping.
    tags = ["manual"],  # Prevent accidental execution under //... builds unless explicitly requested
)

# Localized build info generation (non-hermetic) bundled as a resource for InfoContributor
stamped_build_info(
    name = "build_info_props",
    # version left unset to pull from STABLE_BUILD_VERSION
)

sh_test(
    name = "demoapp_image_structure_test",
    srcs = ["tests/image_structure_test.sh"],
    data = [":demoapp_image"],
    timeout = "short",
    tags = ["structure"],
)

sh_test(
    name = "demoapp_smoke_test",
    srcs = ["smoke_test.sh"],
    data = [":demoapp"],
    timeout = "short",
    tags = ["smoke"],
)

sh_test(
    name = "demoapp_readyz_functional_test",
    srcs = ["tests/readyz_functional_test.sh"],
    data = [":demoapp"],
    timeout = "short",
    tags = ["readyz", "functional"],
)
