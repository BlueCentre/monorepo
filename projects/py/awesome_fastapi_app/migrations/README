# Generic single-database configuration with Alembic

This is a generic Alembic migrations directory, set up for a single database configuration.

## Structure

- `env.py`: Alembic environment configuration
- `script.py.mako`: Template for migration script generation
- `versions/`: Directory containing migration scripts

## Commands

To create a new migration:

```
alembic revision -m "description of changes"
```

To run migrations:

```
alembic upgrade head
```

To downgrade:

```
alembic downgrade -1
```

## Integration with FastAPI Application

The migrations are integrated with the application's database models through:

1. The `env.py` file imports the SQLAlchemy `Base` from the application
2. Migrations can be auto-generated based on model changes
3. The application runs migrations on startup if configured to do so

## Migration Structure

- `env.py`: Alembic environment configuration
- `script.py.mako`: Template for generating new migrations
- `versions/`: Contains migration scripts
  - `01_initial_schema_and_data.py`: Initial migration that creates the database schema and seeds initial data

## Running Migrations

Migrations are automatically run during application deployment by the Kubernetes job defined in `kubernetes/db-migrations-job.yaml`.

To run migrations manually:

```bash
# Run all migrations up to the latest version
python -m app.migrations.scripts.run_migrations upgrade

# Create a new migration
python -m app.migrations.scripts.run_migrations revision "migration_description" --autogenerate

# Seed initial data separately (not usually needed as it's part of the initial migration)
python -m app.migrations.scripts.run_migrations seed
```

## Initial Data

The first migration (`01_initial_schema_and_data.py`) not only creates the database schema but also seeds initial data:

1. Creates a superuser using the credentials from environment variables:
   - Email: `FIRST_SUPERUSER_EMAIL`
   - Password: `FIRST_SUPERUSER_PASSWORD`

2. Creates a sample item owned by the superuser.

This approach ensures that the database is properly initialized with both schema and necessary data in a transactional manner. 