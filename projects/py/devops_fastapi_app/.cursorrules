// DevOps FastAPI App - Rules for AI
// This file provides guidance for working with the DevOps FastAPI App project

// Project Structure
// - projects/py/devops_fastapi_app/app/web_app.py: Main FastAPI application file
// - projects/py/devops_fastapi_app/app/models.py: Pydantic models for the application
// - projects/py/devops_fastapi_app/app/routes.py: Route handlers for the application
// - projects/py/devops_fastapi_app/bin/run_bin.py: Server runner using uvicorn
// - projects/py/devops_fastapi_app/tests/main_test.py: Test file using FastAPI TestClient

// General Guidelines
// 1. This project uses FastAPI for API development
// 2. Pydantic is used for data validation and serialization
// 3. Uvicorn is used as the ASGI server
// 4. The application follows a modular structure with separate files for models, routes, and the main app
// 5. Maintain backward compatibility with the existing API endpoints
// 6. Keep the code simple, well-documented, and follow FastAPI best practices

// Implementation Details
// - The application is built using FastAPI framework
// - It provides five main endpoints: "/", "/status", "/healthcheck", "/devops/{id}", and "/devops/random/{name}"
// - Models are defined using Pydantic BaseModel
// - Routes are organized using FastAPI's APIRouter
// - Error handling is implemented using FastAPI's exception handlers
// - CORS middleware is configured to allow cross-origin requests
// - The application integrates with the DevOps library to provide information about different DevOps roles

// Testing Strategy
// - The project uses a comprehensive testing approach with both unit and integration tests
// - FastAPI's TestClient is used to simulate HTTP requests without starting a real server
// - Tests are organized in the TestDevOpsApp class which inherits from unittest.TestCase
// - Each endpoint has dedicated test methods to verify functionality
// - Tests verify both HTTP status codes and response content/structure
// - Error scenarios are explicitly tested to ensure proper error handling
// - Test fixtures are used to set up the test environment and clean up after tests
// - The TestClient is initialized once and reused across test methods for efficiency
// - Mocking is used to isolate tests from external dependencies

// Test Coverage
// - Root endpoint (/): Verifies the server is alive and returns the expected message
// - Status endpoint (/status): Checks that the application status and version are correctly reported
// - Health endpoint (/healthcheck): Validates the health check response including detailed component statuses
// - DevOps endpoint (/devops/{id}): Tests parameter passing and interaction with the PlatformOrganization
// - Random DevOps endpoint (/devops/random/{name}): Tests parameter passing and response formatting
// - Error handling: Tests 404 responses for non-existent endpoints
// - Response structure: Verifies that all responses follow the defined Pydantic models
// - Content types: Ensures all responses use the correct Content-Type header (application/json)

// Running Tests
// - Local development: Run `python -m unittest discover tests` from the project root
// - With Bazel: Run `bazel test //projects/py/devops_fastapi_app:main_test`
// - CI/CD pipeline: Tests are automatically run as part of the build process
// - Test output includes detailed information about passing/failing tests
// - Failed tests show clear error messages with expected vs. actual values
// - Tests are designed to be fast and independent of each other
// - No external services or databases are required to run the tests

// Build System
// - The project uses Bazel for building and testing
// - Dependencies are specified in the BUILD.bazel file and MODULE.bazel file
// - Use py_library, py_binary, and py_test rules for defining targets
// - The application can be run with: bazel run //projects/py/devops_fastapi_app:run_bin

// Code Style
// - Follow PEP 8 guidelines for Python code
// - Use type hints for all function parameters and return values
// - Use docstrings for all functions, classes, and modules
// - Prefer explicit imports over wildcard imports
// - Keep functions small and focused on a single responsibility

// Error Handling
// - Use appropriate HTTP status codes for error responses
// - Log errors and important events using the logging module
// - Handle exceptions gracefully using FastAPI's exception handlers
// - Return structured error responses using the ErrorResponse model

// Performance Considerations
// - The server should handle multiple concurrent requests
// - Keep response times minimal
// - Use async/await for I/O-bound operations
// - Avoid unnecessary computation in request handlers

// API Documentation
// - API documentation is available at the "/docs" endpoint using Swagger UI
// - Alternative documentation is available at the "/redoc" endpoint using ReDoc
// - Each endpoint has a clear description and response model
// - Response models include examples and descriptions with proper Pydantic V2 configuration
// - Model examples use the model_config with json_schema_extra property

// Development Environment
// - A Python virtual environment is recommended for local development
// - Required packages: fastapi, uvicorn, pydantic, httpx (for testing)
// - Run the server locally with: uvicorn app.web_app:app --reload
// - Default server port is 9090, configurable through command-line arguments

// Endpoints and Response Models
// - Root endpoint (/): Returns {"message": "I am alive"}
// - Status endpoint (/status): Returns {"status": "UP", "version": "0.1.0"}
// - Health endpoint (/healthcheck): Returns detailed health status information
// - DevOps endpoint (/devops/{id}): Returns information about a specific DevOps role
// - Random DevOps endpoint (/devops/random/{name}): Returns information about a random DevOps role

You are an expert in Python, FastAPI, and scalable API development.

Write concise, technical responses with accurate Python examples. Use functional, declarative programming; avoid classes where possible. Prefer iteration and modularization over code duplication. Use descriptive variable names with auxiliary verbs (e.g., is_active, has_permission). Use lowercase with underscores for directories and files (e.g., routers/user_routes.py). Favor named exports for routes and utility functions. Use the Receive an Object, Return an Object (RORO) pattern. Use def for pure functions and async def for asynchronous operations. Use type hints for all function signatures. Prefer Pydantic models over raw dictionaries for input validation.

File structure: exported router, sub-routes, utilities, static content, types (models, schemas).

Avoid unnecessary curly braces in conditional statements. For single-line statements in conditionals, omit curly braces. Use concise, one-line syntax for simple conditional statements (e.g., if condition: do_something()).

Prioritize error handling and edge cases:

FastAPI
Pydantic v2
Async database libraries like asyncpg or aiomysql
SQLAlchemy 2.0 (if using ORM features)

Use functional components (plain functions) and Pydantic models for input validation and response schemas. Use declarative route definitions with clear return type annotations. Use def for synchronous operations and async def for asynchronous ones. Minimize @app.on_event("startup") and @app.on_event("shutdown"); prefer lifespan context managers for managing startup and shutdown events. Use middleware for logging, error monitoring, and performance optimization. Optimize for performance using async functions for I/O-bound tasks, caching strategies, and lazy loading. Use HTTPException for expected errors and model them as specific HTTP responses. Use middleware for handling unexpected errors, logging, and error monitoring. Use Pydantic's BaseModel for consistent input/output validation and response schemas. Minimize blocking I/O operations; use asynchronous operations for all database calls and external API requests. Implement caching for static and frequently accessed data using tools like Redis or in-memory stores. Optimize data serialization and deserialization with Pydantic. Use lazy loading techniques for large datasets and substantial API responses. Refer to FastAPI documentation for Data Models, Path Operations, and Middleware for best practices.
