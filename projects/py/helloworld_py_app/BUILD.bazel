load("@pip//:requirements.bzl", "requirement")
load("@rules_python//python:defs.bzl", "py_binary", "py_library", "py_test")

py_library(
    name = "hello_world_lib",
    srcs = [
        "app/__init__.py",
        "app/cli.py",
    ],
    imports = [".."],
    visibility = ["//:__subpackages__"],
)

py_binary(
    name = "hello_world_bin",
    srcs = ["app/__main__.py"],
    imports = [".."],
    main = "__main__.py",
    visibility = ["//:__subpackages__"],
    deps = [":hello_world_lib"],
)

# Standard alias for consistency with other projects
py_binary(
    name = "app_bin",
    srcs = ["app/__main__.py"],
    imports = [".."],
    main = "__main__.py",
    visibility = ["//:__subpackages__"],
    deps = [":hello_world_lib"],
)

py_test(
    name = "hello_world_test",
    srcs = [
        "tests/__init__.py",
        "tests/test_cli.py",
    ],
    main = "tests/test_cli.py",
    deps = [
        ":hello_world_lib",
        requirement("pytest"),
    ],
)

# Test suite for CI/CD pipeline consistency
test_suite(
    name = "all_tests",
    tests = [
        ":hello_world_test",
    ],
)

# py_image_layer(
#     name = "hello_world_layer",
#     binary = ":hello_world_bin",
#     root = "/opt",
# )

# TODO: Use a custom base to include cross-cutting concerns
# See: https://github.com/bazel-contrib/rules_oci/blob/main/docs/image.md
# oci_image(
#     name = "app_image",
#     base = "@distroless_python",
#     entrypoint = ["/opt/projects/py/helloworld_py_app/hello_world_bin"],
#     tars = [":hello_world_layer"],
# )

platform(
    name = "aarch64_linux",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:aarch64",
    ],
)

platform(
    name = "x86_64_linux",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

# platform_transition_filegroup(
#     name = "transitioned_image",
#     srcs = [":app_image"],
#     target_platform = select({
#         "@platforms//cpu:arm64": ":aarch64_linux",
#         "@platforms//cpu:x86_64": ":x86_64_linux",
#     }),
# )

# $ bazel build //projects/py_helloworld_cli_app:tarball
# $ docker load --input $(bazel cquery --output=files //projects/py_helloworld_cli_app:tarball)
# $ docker run --rm local/py_helloworld_cli_app:latest
# See: https://github.com/bazel-contrib/rules_oci/blob/main/docs/tarball.md
# oci_tarball(
#     name = "tarball",
#     image = ":app_image",
#     repo_tags = ["bazel/helloworld_py_app:latest"],
# )

# See:
# - https://bazel.build/reference/be/common-definitions#common-attributes-tests
# -
# container_structure_test(
#     name = "test",
#     configs = ["oci/container_test.yaml"],
#     image = ":app_image",
#     timeout = "short",
#     exec_properties = {
#         # Tell BuildBuddy to run this test using a Firecracker microVM.
#         "test.workload-isolation-type": "firecracker",
#         # Tell BuildBuddy to ensure that the Docker daemon is started
#         # inside the microVM before the test starts, so that we don't
#         # have to worry about starting it ourselves.
#         "test.init-dockerd": "true",
#     },
# )
