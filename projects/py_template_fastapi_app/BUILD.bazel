# See https://bazel.build/concepts/build-files

load("@pip_deps//:requirements.bzl", "requirement")
load("@python//3.11:defs.bzl", py_binary_3_11 = "py_binary", py_test_3_11 = "py_test")
load("@python//3.10:defs.bzl", py_binary_3_10 = "py_binary", py_test_3_10 = "py_test")
load("@python//3.9:defs.bzl", py_binary_3_9 = "py_binary", py_test_3_9 = "py_test")
load("@python//3.8:defs.bzl", py_binary_3_8 = "py_binary", py_test_3_8 = "py_test")
load("@rules_python//python:defs.bzl", "py_library", "py_binary", "py_test")
# load("//tools/pytest:defs.bzl", "pytest_test")
load("@aspect_bazel_lib//lib:transitions.bzl", "platform_transition_filegroup")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_tarball")
load("//fixes:py_image_layer.bzl", "py_image_layer")
load("@container_structure_test//:defs.bzl", "container_structure_test")


py_library(
    name = "web_app",
    srcs = ["app/web_app.py"],
    # srcs_version = "PY3",
    deps = [requirement("fastapi")],
)

# to add additionals parameters place them after "--" in bazel call, like:
# `bazel run //webapp:run -- --reload`
py_binary(
    name = "run_bin",
    srcs = ["bin/run_bin.py"],
    # python_version = "PY3",
    # srcs_version = "PY3",
    visibility = ["//visibility:public"],
    deps = [
        requirement("uvicorn"),
        ":web_app",
    ],
)

# pytest_test(
#     name = "webapp_test",
#     srcs = glob(["tests/*.py"]),
#     timeout = "short",
#     deps = [
#         requirement("requests"),
#         requirement("httpx"),
#         requirement("fastapi"),
#         ":webapp",
#         ":run",
#     ],
# )

py_test(
    name = "web_app_test",
    srcs = glob(["tests/*.py"]),
    # srcs = ["tests/webapp_test.py"],
    timeout = "short",
    deps = [
        requirement("requests"),
        requirement("httpx"),
        requirement("fastapi"),
        ":web_app",
        ":run_bin",
    ],
)


py_image_layer(
    name = "web_app_layer",
    binary = ":run_bin",
    root = "/opt",
)

# TODO: Use a custom base to include cross-cutting concerns
# See: https://github.com/bazel-contrib/rules_oci/blob/main/docs/image.md
oci_image(
    name = "py_template_image",
    base = "@distroless_python",
    entrypoint = ["/opt/projects/py_template_fastapi_app/run_bin"],
    tars = [":web_app_layer"],
)

platform(
    name = "aarch64_linux",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:aarch64",
    ],
)

platform(
    name = "x86_64_linux",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

platform_transition_filegroup(
    name = "transitioned_image",
    srcs = [":py_template_image"],
    target_platform = select({
        "@platforms//cpu:arm64": ":aarch64_linux",
        "@platforms//cpu:x86_64": ":x86_64_linux",
    }),
)

# $ bazel build //projects/py_template_fastapi_app:tarball
# $ docker load --input $(bazel cquery --output=files //projects/py_template_fastapi_app:tarball)
# $ docker run --rm local/py_template_fastapi_app:latest
# See: https://github.com/bazel-contrib/rules_oci/blob/main/docs/tarball.md
oci_tarball(
    name = "tarball",
    image = ":py_template_image",
    repo_tags = ["local/py_template_fastapi_app:latest"],
)

# See:
# - https://bazel.build/reference/be/common-definitions#common-attributes-tests
# - 
container_structure_test(
    name = "container_test",
    configs = ["tests/container_test.yaml"],
    image = ":py_template_image",
    timeout = "short"
)
