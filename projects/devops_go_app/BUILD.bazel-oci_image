# See: https://bazel.build/concepts/build-files
# TODO:
# - Migrate to rules_oci (https://github.com/bazel-contrib/rules_oci/blob/main/docs/go.md)
# - https://github.com/aspect-build/bazel-examples/tree/main/oci_go_image

#
# Golang (rules_oci - oci_go_image)
#

load("@aspect_bazel_lib//lib:transitions.bzl", "platform_transition_filegroup")
load("@rules_go//go:def.bzl", "go_binary", "go_library")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_tarball", "oci_push")
load("@rules_pkg//:pkg.bzl", "pkg_tar")
load("@container_structure_test//:defs.bzl", "container_structure_test")

go_library(
    name = "app_lib",
    srcs = ["src/main.go"],
    importpath = "example.com/custom_registry/app",
    visibility = ["//visibility:private"],
    deps = [
        "@com_github_google_go_cmp//cmp",
    ],
)

go_binary(
    name = "run_bin",
    embed = [":app_lib"],
    visibility = ["//visibility:public"],
)

# Put app go_binary into a tar layer.
pkg_tar(
    name = "app_layer",
    srcs = [":run_bin"],
    package_dir = "/app"
    # If the binary depends on RUNFILES, uncomment the attribute below.
    # include_runfiles = True
)

oci_image(
    name = "app_image",
    base = "@distroless_base",
    entrypoint = ["/app/run_bin"],
    tars = [":app_layer"],
)

# This is the target that should be released to the target platform
platform_transition_filegroup(
    name = "transitioned_image",
    srcs = [":app_image"],
    target_platform = select({
        "@platforms//cpu:arm64": "@rules_go//go/toolchain:linux_arm64",
        "@platforms//cpu:x86_64": "@rules_go//go/toolchain:linux_amd64",
    }),
)

# $ bazel build projects/devops_go_app:tarball
# $ docker load --input $(bazel cquery --output=files projects/devops_go_app:tarball)
# $ docker run --rm flyr.io/devops-go-app:latest
#   string(
# -       "Hello World",
# +       "Hello Go",
#   )
oci_tarball(
    name = "tarball",
    # Use the image built for the exec platform rather than the target platform
    image = ":app_image",
    repo_tags = [
        "flyr.io/bazel/devops-go-app:latest",
    ],
)

# Skaffold needs a target ending with .tar
# ISSUE: Currently does not work
# oci_tarball(
#     name = "tarball.tar",
#     # Use the image built for the exec platform rather than the target platform
#     image = ":app_image",
#     # repo_tags = ["tarball"],
#     repo_tags = [
#         "flyr.io/bazel/tarball:latest",
#     ],
# )

# genrule(
#     name = "skaffold_tarball.tar",
#     srcs = [":tarball"],
#     outs = ["envinfo.txt"],
#     cmd_bash = """(
#         echo "-----ENV INFO----"
#         echo "ENV:"
#         env
#         echo "-----FILESYSTEM INFO----"
#         echo "PWD: `pwd`"
#         echo "Files:"
#         ls -laF
#         echo "-----DEBUG INFO----"
#         echo "whoami     = $$(whoami)"
#         echo "TARGET_CPU = $(TARGET_CPU)"
#         echo "BINDIR     = $(BINDIR)"
#         echo "GENDIR     = $(GENDIR)"
#         echo "OUTS       = $(OUTS)"
#         echo "SRCS       = $(SRCS)"
#         echo "RULEDIR    = $(RULEDIR)"
#         docker load --input $(SRCS)
#     ) | tee $@""",
# )

# See:
# - https://github.com/GoogleContainerTools/container-structure-test
# - https://github.com/GoogleContainerTools/container-structure-test#running-structure-tests-through-bazel
container_structure_test(
    name = "test",
    configs = ["tests/test.yaml"],
    # Use the image built for the exec platform rather than the target platform
    image = ":app_image",
    timeout = "short",
    exec_properties = {
        # Tell BuildBuddy to run this test using a Firecracker microVM.
        "test.workload-isolation-type": "firecracker",
        # Tell BuildBuddy to ensure that the Docker daemon is started
        # inside the microVM before the test starts, so that we don't
        # have to worry about starting it ourselves.
        "test.init-dockerd": "true",
    },
)

# oci_push(
#     name = "app_image_push",
#     image = ":app_image",
#     repository = "flyr.io/bazel/devops-go-app",
#     remote_tags = ["latest"]
# )
