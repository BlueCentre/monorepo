"""Macros for generating Spring Boot compatible build-info.properties via Bazel stamping.

Usage:

Load the macro and call stamped_build_info to produce a file target you can add
to java_library resources. Invoke bazel with --stamp and optionally
--workspace_status_command=scripts/workspace_status.sh to ensure stamping keys
are populated.

Example:

load("//tools/build:build_info.bzl", "stamped_build_info")

stamped_build_info(
    name = "build_info_props",
    version = "0.1.0",  # optional override, else STABLE_BUILD_VERSION
)

java_library(
    name = "app_lib",
    ...,
    resources = [":build_info_props"],
)

Spring Boot will automatically expose these values under /actuator/info via its
InfoEndpoint default BuildInfoContributor when located at META-INF/build-info.properties.
"""

def _build_info_impl(ctx):
    # Resolve stamping vars (ctx.var provides workspace status values)
    version = ctx.attr.version or ctx.var.get("STABLE_BUILD_VERSION", "0.0.0")
    git_rev = ctx.var.get("STABLE_BUILD_SCM_REVISION", "unknown")
    git_branch = ctx.var.get("STABLE_BUILD_SCM_BRANCH", "unknown")
    git_status = ctx.var.get("STABLE_BUILD_SCM_STATUS", "unknown")
    timestamp = ctx.var.get("BUILD_TIMESTAMP", "1970-01-01T00:00:00Z")
    build_user = ctx.var.get("BUILD_USER", "unknown")
    build_host = ctx.var.get("BUILD_HOST", "unknown")

    out = ctx.actions.declare_file("META-INF/build-info.properties")
    content = """# Generated by stamped_build_info macro
build.version={version}
build.time={timestamp}
build.user={build_user}
build.host={build_host}
git.branch={git_branch}
git.commit.id.abbrev={git_rev}
git.dirty={git_status}
""".format(
        version = version,
        timestamp = timestamp,
        build_user = build_user,
        build_host = build_host,
        git_branch = git_branch,
        git_rev = git_rev,
        git_status = git_status,
    )

    ctx.actions.write(out, content)
    return [DefaultInfo(files = depset([out]))]

stamped_build_info = rule(
    implementation = _build_info_impl,
    attrs = {
        "version": attr.string(),
    },
    # Mark as stamp aware so that ctx.var contains workspace status values when --stamp is used
    provides = [DefaultInfo],
    executable = False,
)
