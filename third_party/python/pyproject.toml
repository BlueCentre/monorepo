## Source of truth for Python dependencies (Pattern B / uv migration)
## All dependencies (runtime + tooling) are declared together initially for simplicity.
## Future improvement: split dev/test-only packages into [project.optional-dependencies].

[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"

[project]
name = "monorepo-python-deps"
version = "0.1.0"
description = "Consolidated dependency specification for Bazel consumed Python tooling/apps (managed by uv)."
requires-python = ">=3.11,<3.12"
authors = [ { name = "BlueCentre" } ]
readme = "README.md"
license = { text = "Apache-2.0" }
dependencies = [
  # Core runtime / frameworks (minimal base for deployed services & libs)
  "fastapi",
  "flask",
  "sqlalchemy",
  "asyncpg",
  "pydantic>=2.3.0",
  "pydantic-settings>=2.0.3",
  "email-validator>=2.0.0",
  "slowapi",
  "uvicorn",
  "websockets",
  "python-jose",
  "passlib",
  "bcrypt",
  "python-multipart",
  "tenacity",
  "google-cloud-pubsub",

  # OpenTelemetry (runtime instrumentation shipped with services)
  "opentelemetry-api",
  "opentelemetry-sdk",
  "opentelemetry-exporter-otlp",
  "opentelemetry-instrumentation-fastapi",
  "opentelemetry-instrumentation-sqlalchemy",
  "opentelemetry-instrumentation-logging",
  "opentelemetry-instrumentation-requests",
  "opentelemetry-instrumentation-httpx",
  
  # CLI frameworks & UX libs (needed for template_typer_app)
  "typer[all]>=0.9.0",
  "rich>=13.0.0",
]

[dependency-groups]
# Developer tooling (format, lint, static analysis)
tooling = [
  # Use latest stable tooling (policy: unpinned unless a documented exception exists)
  "ruff",
  "pytest-mypy",
]

# Testing libraries & clients
test = [
  "pytest",
  "requests",
  "httpx",
]

# Project scaffolding (template generation). Split so production images need not include Copier.
scaffolding = [
  # Copier left unpinned per latest-stable policy
  "copier",
]

[tool.uv]
managed = true

[tool.ruff]
select = ["E", "F", "B", "I", "N", "UP", "S", "A", "C4", "RET", "SIM"]  # Temporarily removed ANN and T20 for baseline
ignore = []
fixable = ["ALL"]
unfixable = []
exclude = [
    ".bzr",
    ".direnv",
    ".eggs", 
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
  "bazel-*",
  "*_pb2.py",
  "*_pb2_grpc.py",
  "projects/microservices-demo/src/recommendationservice/",
]
line-length = 120
indent-width = 4
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py311"

# Hardening Roadmap (do not enable prematurely):
# Phase 1: Stabilize (current) - relaxed line length (120), excludes generated code, ANN/T20 disabled.
# Phase 2: Reintroduce import sorting edge cases & tighten excludes (narrow pattern for generated files only).
# Phase 3: Re-enable type annotation rules (ANN*), start with warnings by running `ruff check --select ANN --exit-zero` in CI dry-run.
# Phase 4: Re-enable `T20` (print statements) after ensuring no legitimate CLI scripts depend on prints.
# Phase 5: Reduce line-length to 100 (or 88) and address failures incrementally (prioritize core libraries & templates).
# Phase 6: Introduce docstring enforcement widen (pydocstyle D* beyond current baseline if desired).
# Each phase should: (a) add rule, (b) run `ruff --statistics`, (c) auto-fix, (d) manually triage residual, (e) update policy if exception needed.

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]
"**/test_*.py" = ["S101"]
"tools/*" = ["E501"]  # Allow long lines in CLI tooling scripts for now

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.pylint]
max-args = 6
